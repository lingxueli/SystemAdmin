GRUB 2 sits on the boot sector of the server's hard drive. It loads the kernel and initramfs. 

kernel controls the booting process and executes neccessary processes to boot the system. 

initramfs loads kernel modules for hardwares, as well as the initial scripts. It's a mini file system that is mounted by kernel during boot.


# GRUB 2 man page

$ man 8 grub2-mkconfig
SEE ALSO
       info grub
    
$ info grub
-> menu

Kernel
* grub2-dev: (grub2-dev).       The GRand Unified Bootloader Dev
* grub2-install: (grub2)Invoking grub2-install.
                                Install GRUB on your drive
* grub2-mkconfig: (grub2)Invoking grub2-mkconfig.
                                Generate GRUB configuration
* grub2-mkpasswd-pbkdf2: (grub2)Invoking grub2-mkpasswd-pbkdf2.
* grub2-mkrelpath: (grub2)Invoking grub2-mkrelpath.
* grub2-mkrescue: (grub2)Invoking grub2-mkrescue.
                                Make a GRUB rescue image
* grub2-mount: (grub2)Invoking grub2-mount.
                                Mount a file system using GRUB
* grub2-probe: (grub2)Invoking grub2-probe.
                                Probe device information
* grub2-script-check: (grub2)Invoking grub2-script-check.
* GRUB2: (grub2).               The GRand Unified Bootloader
-> GRUB2: (grub2).               The GRand Unified Bootloader
-> COnfiguration
-> * Simple configuration::            Recommended for most users

6.1 Simple configuration handling
=================================

The program 'grub2-mkconfig' (*note Invoking grub2-mkconfig::) generates
'grub.cfg' files suitable for most cases.  It is suitable for use when
upgrading a distribution, and will discover available kernels and
attempt to generate menu entries for them.

   'grub2-mkconfig' does have some limitations.  While adding extra
custom menu entries to the end of the list can be done by editing
'/etc/grub.d/40_custom' or creating '/boot/grub2/custom.cfg', changing
the order of menu entries or changing their titles may require making
complex changes to shell scripts stored in '/etc/grub.d/'.  This may be
improved in the future.  In the meantime, those who feel that it would
be easier to write 'grub.cfg' directly are encouraged to do so (*note
Booting::, and *note Shell-like scripting::), and to disable any system
provided by their distribution to automatically run 'grub2-mkconfig'.

   The file '/etc/default/grub' controls the operation of
'grub2-mkconfig'.  It is sourced by a shell script, and so must be valid
POSIX shell input; normally, it will just be a sequence of 'KEY=value'
lines, but if the value contains spaces or other special characters then
it must be quoted.  For example:

     GRUB_TERMINAL_INPUT="console serial"

/etc/default/grub: define the behaviors of grub2, such as boot arguments, timeout
/etc/grub.d/: customized version of /etc/default/grub, it contains many shell scripts, such as:01_users
/boot/grub2/grub.cfg: the config file generated by the script based on the settings of /etc/default/grub

/boot/grub2/: These are automatically generated from GRUB2 config file. Don't modify them.

in a BIOS system: the config file is under /boot/grub2/grub.cfg
in a UEFI system: the config file is under /boot/efi/EFI/redhat
# EFI (Extensible Firmware Interface)


[root@localhost lisa]# cat /etc/default/grub 
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT="console"
GRUB_CMDLINE_LINUX="crashkernel=auto resume=UUID=ce900ef4-22cc-4e07-9924-9308c82f6b65 rd.lvm.lv=cl/sda2 rhgb quiet"
GRUB_DISABLE_RECOVERY="true"
GRUB_ENABLE_BLSCFG=true


[root@localhost ~]# cd /etc/grub.d/
[root@localhost grub.d]# ls -al
total 104
drwx------.   2 root root   288 Mar 10 23:08 .
drwxr-xr-x. 146 root root  8192 Apr  4 16:06 ..
-rwxr-xr-x.   1 root root  8958 Mar  2 13:51 00_header
-rwxr-xr-x.   1 root root  1043 Jun 15  2020 00_tuned
-rwxr-xr-x.   1 root root   232 Mar  2 13:51 01_users
-rwxr-xr-x.   1 root root   832 Mar  2 13:51 08_fallback_counting
-rwxr-xr-x.   1 root root 14088 Mar  2 13:51 10_linux
-rwxr-xr-x.   1 root root   830 Mar  2 13:51 10_reset_boot_success
-rwxr-xr-x.   1 root root   889 Mar  2 13:51 12_menu_auto_hide
-rwxr-xr-x.   1 root root 11696 Mar  2 13:51 20_linux_xen
-rwxr-xr-x.   1 root root  2559 Mar  2 13:51 20_ppc_terminfo
-rwxr-xr-x.   1 root root 10670 Mar  2 13:51 30_os-prober
-rwxr-xr-x.   1 root root  1412 Mar  2 13:51 30_uefi-firmware
-rwxr-xr-x.   1 root root   214 Mar  2 13:51 40_custom
-rwxr-xr-x.   1 root root   216 Mar  2 13:51 41_custom
-rw-r--r--.   1 root root   483 Mar  2 13:51 README

[root@localhost grub.d]# cat 01_users
#!/bin/sh -e
cat << EOF
if [ -f \${prefix}/user.cfg ]; then
  source \${prefix}/user.cfg
  if [ -n "\${GRUB2_PASSWORD}" ]; then
    set superusers="root"
    export superusers
    password_pbkdf2 root \${GRUB2_PASSWORD}
  fi
fi
EOF


[root@localhost ~]# cd /boot/grub2
[root@localhost grub2]# ls
device.map  fonts  grub.cfg  grubenv  i386-pc
[root@localhost grub2]# cat grub.cfg 


[root@localhost centos]# pwd
/boot/efi/EFI/centos
[root@localhost centos]# ls

# how to modify default GRUB 2 config

1. modify GRUB config file: /etc/default/grub

# Change boot arguments: remove "rhgb quiet". Debug info will show up
# Change boot menu timer to 10sec


rhgb = redhat graphical boot - This is a GUI mode booting screen with most of the information hidden while the user sees a rotating activity icon spining and brief information as to what the computer is doing.

quiet = hides the majority of boot messages before rhgb starts. These are supposed to make the common user more comfortable. They get alarmed about seeing the kernel and initializing messages, so they hide them for their comfort.


[root@localhost grub.d]# vi /etc/default/grub
[root@localhost grub.d]# cat /etc/default/grub 
GRUB_TIMEOUT=10
GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT="console"
GRUB_CMDLINE_LINUX="crashkernel=auto resume=UUID=ce900ef4-22cc-4e07-9924-9308c82f6b65 rd.lvm.lv=cl/sda2"
GRUB_DISABLE_RECOVERY="true"
GRUB_ENABLE_BLSCFG=true

2. push GRUB config change to boot config file: /boot/grub2/grub.cfg
[root@localhost grub.d]# grub2-mkconfig -o /boot/grub2/grub.cfg
Generating grub configuration file ...
done


GRUB-MKCONFIG(1)                      General Commands Manual                     GRUB-MKCONFIG(1)

NAME
       grub-mkconfig — Generate a GRUB configuration file.

SYNOPSIS
       grub-mkconfig [-o | --output=FILE]

DESCRIPTION
       grub-mkconfig generates a configuration file for GRUB.


# where to find the boot parameters?
[root@localhost grub.d]# man 7 bootparam
BOOTPARAM(7)                            Linux Programmer's Manual                           BOOTPARAM(7)

NAME
       bootparam - introduction to boot time parameters of the Linux kernel

   The argument list
       The kernel command line is parsed into a list of strings (boot arguments) separated by spa‐
       ces.  Most of the boot arguments have the form:

           name[=value_1][,value_2]...[,value_10]

   General non-device-specific boot arguments
       'init=...'
              This sets the initial command to be executed by the kernel.  If this is not set,  or
              cannot  be  found,  the  kernel will try /sbin/init, then /etc/init, then /bin/init,
              then /bin/sh and panic if all of this fails.

       'resume=...'
              This tells the kernel the location of the suspend-to-disk data  that  you  want  the
              machine to resume from after hibernation.  Usually, it is the same as your swap par‐
              tition or file.  Example:

                  resume=/dev/hda2

   Boot arguments for use by kernel developers
   Boot arguments for ramdisk use
   Boot arguments for SCSI devices
