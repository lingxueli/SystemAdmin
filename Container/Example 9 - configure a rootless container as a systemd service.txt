# rootless container is launched by a non-root user

# create the user and password
[lisa@localhost ~]$ sudo useradd conuser1
[lisa@localhost ~]$ echo conuser1 | sudo passwd --stdin conuser1

PASSWD(1)                                 User utilities                                PASSWD(1)

NAME
       passwd - update user's authentication tokens

SYNOPSIS
       passwd [-k] [-l] [-u [-f]] [-d] [-e] [-n mindays] [-x maxdays] [-w warndays] [-i inactive‐
       days] [-S] [--stdin] [-?] [--usage] [username]

       --stdin
              This option is used to indicate that passwd should read the new password from stan‐
              dard input, which can be a pipe.

[lisa@localhost ~]$ su conuser1

# for rootless container, the directory to store the systemd unit file is different from what's used by a root container
[conuser1@localhost ~]$ mkdir ~/.config/systemd/user -p

       -p, --parents
              no error if existing, make parent directories as needed

# launch the container in detach mode
[conuser1@localhost ~]$ podman run -dt --name rootless-container ubi8
ERRO[0000] cannot mkdir /run/user/1000/libpod: mkdir /run/user/1000/libpod: permission denied 


# to create a directory, you need the write permission to the parent directory
[conuser1@localhost ~]$ ls -ld /run/user/1000
drwx------. 13 lisa lisa 340 Mar 20 20:29 /run/user/1000

# close the previous terminal window where the login user is lisa
# restart the terminal session, login as conuser1

# launch the container in detach mode again
[conuser1@localhost ~]$ podman run -dt --name rootless-container ubi8
Completed short name "ubi8" with unqualified-search registries (origin: /etc/containers/registries.conf)
Trying to pull registry.access.redhat.com/ubi8:latest...
Getting image source signatures
Copying blob fdb393d8227c done  
Copying blob 6b536614e8f8 done  
Copying config 4199acc83c done  
Writing manifest to image destination
Storing signatures
fee40f14bcc452146d66ca71e8298c39c0d8c758ddaebe46167e34094b7e7a28


[conuser1@localhost ~]$ podman ps
CONTAINER ID  IMAGE                                   COMMAND    CREATED        STATUS            PORTS   NAMES
fee40f14bcc4  registry.access.redhat.com/ubi8:latest  /bin/bash  7 minutes ago  Up 7 minutes ago          rootless-container

   --new
       Using this flag will yield unit files that do not expect containers and
       pods to exist.  Instead, new containers and pods are created based on
       their configuration files.  The unit files are created best effort and
       may need to be further edited; please review the generated files
       carefully before using them in production.

# create the systmed unit file from the container
[conuser1@localhost ~]$ podman generate systemd --new --name rootless-container > ~/.config/systemd/user/rootless-container.service


[conuser1@localhost ~]$ cat ~/.config/systemd/user/rootless-container.service 
# container-rootless-container.service
# autogenerated by Podman 2.2.1
# Sat Mar 20 20:51:49 MDT 2021

[Unit]
Description=Podman container-rootless-container.service
Documentation=man:podman-generate-systemd(1)
Wants=network.target
After=network-online.target

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
ExecStartPre=/bin/rm -f %t/container-rootless-container.pid %t/container-rootless-container.ctr-id
ExecStart=/usr/bin/podman run --conmon-pidfile %t/container-rootless-container.pid --cidfile %t/container-rootless-container.ctr-id --cgroups=no-conmon -d --replace -dt --name rootless-container ubi8
ExecStop=/usr/bin/podman stop --ignore --cidfile %t/container-rootless-container.ctr-id -t 10
ExecStopPost=/usr/bin/podman rm --ignore -f --cidfile %t/container-rootless-container.ctr-id
PIDFile=%t/container-rootless-container.pid
KillMode=none
Type=forking

[Install]
WantedBy=multi-user.target default.target


# stop and delete the source container
[conuser1@localhost ~]$ podman stop rootless-container
fee40f14bcc452146d66ca71e8298c39c0d8c758ddaebe46167e34094b7e7a28
[conuser1@localhost ~]$ podman rm rootless-container
fee40f14bcc452146d66ca71e8298c39c0d8c758ddaebe46167e34094b7e7a28


[conuser1@localhost ~]$ podman ps -a
CONTAINER ID  IMAGE   COMMAND  CREATED  STATUS  PORTS   NAMES


[lisa@localhost ~]$ man systemctl
       daemon-reload
           Reload the systemd manager configuration. This will rerun all generators (see systemd.generator(7)), reload
           all unit files, and recreate the entire dependency tree. While the daemon is being reloaded, all sockets
           systemd listens on behalf of user configuration will stay accessible.

           This command should not be confused with the reload command.
           
       reload PATTERN...
           Asks all units listed on the command line to reload their configuration. Note that this will reload the
           service-specific configuration, not the unit configuration file of systemd. If you want systemd to reload
           the configuration file of a unit, use the daemon-reload command. In other words: for the example case of
           Apache, this will reload Apache's httpd.conf in the web server, not the apache.service systemd unit file.

           This command should not be confused with the daemon-reload command.
           
       --user
           Talk to the service manager of the calling user, rather than the
           service manager of the system.
           
# reload systemd manager for the current user not the whole system

[conuser1@localhost ~]$ systemctl --user daemon-reload
Failed to connect to bus: No such file or directory

# D-bus issue
In computing, D-Bus is a Message-oriented middleware mechanism that allows communication between multiple processes running concurrently on the same machine. Wikipedia

# it was caused by trying to run a service as a user I was not logged in with (this user has login disable, and I was using su and sg to fake it).

# quit the console that was logged in lisa, start a console logged in as conuser1
[conuser1@localhost ~]$ systemctl --user daemon-reload


# start a new container from systemd for the current user

[conuser1@localhost ~]$ systemctl --user enable --now root-container.service
[conuser1@localhost ~]$ systemctl --user status rootless-container
● rootless-container.service - Podman container-rootless-container.service
   Loaded: loaded (/home/conuser1/.config/systemd/user/rootless-container.servi>
   Active: active (running) since Sat 2021-03-20 21:25:20 MDT; 1min 33s ago
     Docs: man:podman-generate-systemd(1)
  Process: 2600 ExecStopPost=/usr/bin/podman rm --ignore -f --cidfile /run/user>
  Process: 2662 ExecStart=/usr/bin/podman run --conmon-pidfile /run/user/1005/c>
  Process: 2660 ExecStartPre=/bin/rm -f /run/user/1005/container-rootless-conta>
 Main PID: 2717 (conmon)
   CGroup: /user.slice/user-1005.slice/user@1005.service/rootless-container.ser>
           ├─2712 /usr/bin/slirp4netns --disable-host-loopback --mtu 65520 --en>
           ├─2714 /usr/bin/fuse-overlayfs -o lowerdir=/home/conuser1/.local/sha>
           ├─2717 /usr/bin/conmon --api-version 1 -c 14aef47654f182480f5cb08775>
           └─14aef47654f182480f5cb0877584b44fbf72f6cd435969fc5d37c80cb1019039
             └─2751 /bin/bash

Mar 20 21:25:17 localhost.localdomain systemd[2452]: rootless-container.service>
Mar 20 21:25:17 localhost.localdomain systemd[2452]: rootless-container.service>
Mar 20 21:25:17 localhost.localdomain systemd[2452]: Stopped Podman container-r>
Mar 20 21:25:17 localhost.localdomain systemd[2452]: Starting Podman container->
Mar 20 21:25:20 localhost.localdomain podman[2662]: 14aef47654f182480f5cb087758>
Mar 20 21:25:20 localhost.localdomain systemd[2452]: Started Podman container-r>


[conuser1@localhost ~]$ podman ps
CONTAINER ID  IMAGE                                   COMMAND    CREATED             STATUS                 PORTS   NAMES
14aef47654f1  registry.access.redhat.com/ubi8:latest  /bin/bash  About a minute ago  Up About a minute ago          rootless-container


# features of rootless container

# user lingering: when the user exits, the system spawns a user manager and keeps it running in the backgroud. The service initiated by that users are still running, as if the user is still active.

# to turn on the user lingering, use the login manager - loginctl

LOGINCTL(1)                        loginctl                        LOGINCTL(1)

NAME
       loginctl - Control the systemd login manager

SYNOPSIS
       loginctl [OPTIONS...] {COMMAND} [NAME...]

DESCRIPTION
       loginctl may be used to introspect and control the state of the
       systemd(1) login manager systemd-logind.service(8).


       enable-linger [USER...], disable-linger [USER...]
           Enable/disable user lingering for one or more users. If enabled for
           a specific user, a user manager is spawned for the user at boot and
           kept around after logouts. This allows users who are not logged in
           to run long-running services. Takes one or more user names or
           numeric UIDs as argument. If no argument is specified,
           enables/disables lingering for the user of the session of the
           caller.

           See also KillUserProcesses= setting in logind.conf(5).

       show-user [USER...]
           Show properties of one or more users or the manager itself. If no
           argument is specified, properties of the manager will be shown. If
           a user is specified, properties of the user are shown. By default,
           empty properties are suppressed. Use --all to show those too. To
           select specific properties to show, use --property=. This command
           is intended to be used whenever computer-parsable output is
           required. Use user-status if you are looking for formatted
           human-readable output.


# enable user lingering

[conuser1@localhost ~]$ loginctl enable-linger
[conuser1@localhost ~]$ loginctl show-user conuser1
UID=1005
GID=1008
Name=conuser1
Timestamp=Sat 2021-03-20 21:25:15 MDT
TimestampMonotonic=47539848
RuntimePath=/run/user/1005
Service=user@1005.service
Slice=user-1005.slice
Display=2
State=active
Sessions=2
IdleHint=no
IdleSinceHint=0
IdleSinceHintMonotonic=0
Linger=yes      ### user lingering is enabled

# when user lingering is enabled, the container remains active after the user logs off.

# restart systemd service to recreate the container
[conuser1@localhost ~]$ systemctl --user restart rootless-container.service
[conuser1@localhost ~]$ systemctl --user status rootless-container.service
● rootless-container.service - Podman container-rootless-container.service
   Loaded: loaded (/home/conuser1/.config/systemd/user/rootless-container.servi>
   Active: active (running) since Sat 2021-03-20 21:39:16 MDT; 4s ago
     Docs: man:podman-generate-systemd(1)
  Process: 3680 ExecStopPost=/usr/bin/podman rm --ignore -f --cidfile /run/user>
  Process: 3638 ExecStop=/usr/bin/podman stop --ignore --cidfile /run/user/1005>
  Process: 3706 ExecStart=/usr/bin/podman run --conmon-pidfile /run/user/1005/c>
  Process: 3705 ExecStartPre=/bin/rm -f /run/user/1005/container-rootless-conta>
 Main PID: 3734 (conmon)
   CGroup: /user.slice/user-1005.slice/user@1005.service/rootless-container.ser>
           ├─3729 /usr/bin/fuse-overlayfs -o lowerdir=/home/conuser1/.local/sha>
           ├─3731 /usr/bin/slirp4netns --disable-host-loopback --mtu 65520 --en>
           ├─3734 /usr/bin/conmon --api-version 1 -c 9499589f0974c235308fd614cc>
           └─9499589f0974c235308fd614cc9792213e0a9abf501c051eb2b990e96cefcd0c
             └─3745 /bin/bash

Mar 20 21:39:15 localhost.localdomain systemd[2452]: rootless-container.service>
Mar 20 21:39:15 localhost.localdomain systemd[2452]: Stopped Podman container-r>
Mar 20 21:39:15 localhost.localdomain systemd[2452]: Starting Podman container->
Mar 20 21:39:16 localhost.localdomain podman[3706]: 9499589f0974c235308fd614cc9>
Mar 20 21:39:16 localhost.localdomain systemd[2452]: Started Podman container-r>