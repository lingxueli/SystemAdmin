Port mapping:

A containerized application/database may need to talk to other application/database running in a different container on the same or different host. Port mappping is used to specify the network port used between the system host and container.

Normal user cannot map a host port below 1024 to a container port.


Example:

Containerized Apache web server needs to talk to a mysql database instance running in a different container.


# search for the container; login to the registry and download the container image

[root@localhost ~]# podman search httpd | grep rhel7 | grep redhat | less

redhat.io   registry.redhat.io/rhscl/httpd-24-rhel7                                      Apache HTTP 2.4 Server                           0                 

[root@localhost ~]# podman login registry.redhat.io
Username: lingxue.li1203	
Password: 
Login Succeeded!

       │podman-login(1)       │ Login to a container registry.          │


[root@localhost ~]# podman pull registry.redhat.io/rhscl/httpd-24-rhel7 

       │podman-pull(1)        │ Pull an image from a registry.          │

# container is not running
[root@localhost ~]# podman ps
CONTAINER ID  IMAGE   COMMAND  CREATED  STATUS  PORTS   NAMES

# image is downloaded
[root@localhost ~]# podman images
REPOSITORY                               TAG     IMAGE ID      CREATED     SIZE
registry.redhat.io/rhscl/httpd-24-rhel7  latest  7f619078de75  3 days ago  329 MB


# run the container as a deamon - detached mode

[root@localhost ~]# podman run -dp 10000:8000 --name rhel7-port-map httpd-24-rhel7
1c15c7f2307e991412f6b71e06a99b283d99e3c013d378710b91cb47a4613eff

# port mapping: host port 10000 map to container port 8000
# name assign to the running container: rhel7-port-map
# image to run: httpd-24-rhel7

podman-run(1)                                   General Commands Manual                                  podman-run(1)

NAME
       podman-run - Run a command in a new container

SYNOPSIS
       podman run [options] image [command [arg ...]]

       podman container run [options] image [command [arg ...]]

   --name=name
       Assign a name to the container.

       The operator can identify a container in three ways:

       · UUID long identifier (“f78375b1c487e03c9438c729345e54db9d20cfa2ac1fc3494b6eb60872e74778”);

       · UUID short identifier (“f78375b1c487”);

       · Name (“jonah”).

       Podman generates a UUID for each container, and if a name is not assigned to the container with --name then it
       will generate a random string name. The name is useful any place you need to identify a container.  This works
       for both background and foreground containers.

   --detach, -d=true|false
       Detached mode: run the container in the background and print the new container ID. The default is false.

       At any time you can run podman ps in the other shell to view a list of the running containers. You can reattach
       to a detached container with podman attach.

       When attached in the tty mode, you can detach from the container (and leave it running) using a configurable
       key sequence. The default sequence is ctrl-p,ctrl-q.  Configure the keys sequence using the --detach-keys
       option, or specifying it in the containers.conf file: see containers.conf(5) for more information.


   --publish, -p=ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort
       Publish a container's port, or range of ports, to the host.

       Both hostPort and containerPort can be specified as a range of ports.

       When specifying ranges for both, the number of container ports in the range must match the number of host ports
       in the range.

       If host IP is set to 0.0.0.0 or not set at all, the port will be bound on all IPs on the host.

       Host port does not have to be specified (e.g. podman run -p 127.0.0.1::80).  If it is not, the container port
       will be randomly assigned a port on the host.

       Use podman port to see the actual mapping: podman port $CONTAINER $CONTAINERPORT.

# verify port mapping
# port mapping: host port 10000 map to container port 8000
# port mapping: 0.0.0.0:10000->8000/tcp
[root@localhost ~]# podman ps
CONTAINER ID  IMAGE           COMMAND               CREATED        STATUS            PORTS                    NAMES
1c15c7f2307e  httpd-24-rhel7  /usr/bin/run-http...  9 minutes ago  Up 9 minutes ago  0.0.0.0:10000->8000/tcp  rhel7-port-map


[root@localhost ~]# podman port rhel7-port-map
8000/tcp -> 0.0.0.0:10000


       │podman-port(1)        │ List port mappings for a         │
       │                      │ container.                       │


inbound web traffic on host port 10000 will be redirected to the container

