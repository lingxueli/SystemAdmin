The container can be started, stoped and deleted through systemd service
It automates the process in a simpler way

Create the systemd config file from a source container
The new containers can be launched based on the config in systemd

The container is gone if the systemd process is stopped
The container is created if the systemd process is started

$ man podman-run
--detach, -d=true|false
       Detached mode: run the container in the background and print the new container ID. The default is false.

       At any time you can run podman ps in the other shell to view a list of the running containers. You can reattach
       to a detached container with podman attach.

       When attached in the tty mode, you can detach from the container (and leave it running) using a configurable
       key sequence. The default sequence is ctrl-p,ctrl-q.  Configure the keys sequence using the --detach-keys
       option, or specifying it in the containers.conf file: see containers.conf(5) for more information.

# launch the root container in detach mode - container running in the background
[lisa@localhost ~]$ sudo podman run -dt --name root-container ubi8
[sudo] password for lisa: 
8d424c7be459bc44dd35d61076d57e415919a6bc1c278324802ef5919f7d0ccd
[lisa@localhost ~]$ sudo podman ps
CONTAINER ID  IMAGE                                   COMMAND    CREATED         STATUS             PORTS   NAMES
8d424c7be459  registry.access.redhat.com/ubi8:latest  /bin/bash  15 seconds ago  Up 15 seconds ago          root-container


       │podman-generate(1)    │ Generate structured data based for a    │
       │                      │ containers and pods.                    │


NAME
       podman-generate - Generate structured data based for a containers and pods

SYNOPSIS
       podman generate subcommand

DESCRIPTION
       The generate command will create structured output (like YAML) based on a container or pod.

COMMANDS
       ┌────────┬────────────────────────────┬───────────────────────────────┐
       │Command │ Man Page                   │ Description                   │
       ├────────┼────────────────────────────┼───────────────────────────────┤
       │kube    │ podman-generate-kube(1)    │ Generate Kubernetes YAML      │
       │        │                            │ based on a pod or container.  │
       ├────────┼────────────────────────────┼───────────────────────────────┤
       │systemd │ podman-generate-systemd(1) │ Generate systemd unit file(s) │
       │        │                            │ for a container or pod. Not   │
       │        │                            │ supported for the remote      │
       │        │                            │ client.                       │
       └────────┴────────────────────────────┴───────────────────────────────┘

[lisa@localhost ~]$ man podman-generate-systemd
podman-generate-systemd(1)                      General Commands Manual                     podman-generate-systemd(1)

NAME
       podman-generate-systemd - Generate systemd unit file(s) for a container or pod. Not supported for the remote
       client

SYNOPSIS
       podman generate systemd [options] container|pod

DESCRIPTION
       podman generate systemd will create a systemd unit file that can be used to control a container or pod.  By
       default, the command will print the content of the unit files to stdout.

       Note: If you use this command with the remote client, you would still have to place the generated units on the
       remote system.

   --new
       Using this flag will yield unit files that do not expect containers and pods to exist.  Instead, new containers
       and pods are created based on their configuration files.  The unit files are created best effort and may need
       to be further edited; please review the generated files carefully before using them in production.

   --name, -n
       Use the name of the container for the start, stop, and description in the unit file



# generate a systemd service unit file for the container - root-container.service
# the next new container will be launched based on this config file

# --new: the config file will work for the next new container even if the source container is removed
[lisa@localhost ~]$ sudo podman generate systemd --new --name root-container | sudo tee /etc/systemd/system/root-container.service
# container-root-container.service
# autogenerated by Podman 2.2.1
# Sat Mar 20 16:08:58 MDT 2021

[Unit]
Description=Podman container-root-container.service
Documentation=man:podman-generate-systemd(1)
Wants=network.target
After=network-online.target

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
ExecStartPre=/bin/rm -f %t/container-root-container.pid %t/container-root-container.ctr-id
ExecStart=/usr/bin/podman run --conmon-pidfile %t/container-root-container.pid --cidfile %t/container-root-container.ctr-id --cgroups=no-conmon -d --replace -dt --name root-container ubi8
ExecStop=/usr/bin/podman stop --ignore --cidfile %t/container-root-container.ctr-id -t 10
ExecStopPost=/usr/bin/podman rm --ignore -f --cidfile %t/container-root-container.ctr-id
PIDFile=%t/container-root-container.pid
KillMode=none
Type=forking

[Install]
WantedBy=multi-user.target default.target


# remove the source container

[lisa@localhost ~]$ sudo podman stop root-container
8d424c7be459bc44dd35d61076d57e415919a6bc1c278324802ef5919f7d0ccd
[lisa@localhost ~]$ sudo podman rm root-container
8d424c7be459bc44dd35d61076d57e415919a6bc1c278324802ef5919f7d0ccd
[lisa@localhost ~]$ podman ps -a
CONTAINER ID  IMAGE   COMMAND  CREATED  STATUS  PORTS   NAMES



[lisa@localhost ~]$ man systemctl
       daemon-reload
           Reload the systemd manager configuration. This will rerun all generators (see systemd.generator(7)), reload
           all unit files, and recreate the entire dependency tree. While the daemon is being reloaded, all sockets
           systemd listens on behalf of user configuration will stay accessible.

           This command should not be confused with the reload command.
           
       reload PATTERN...
           Asks all units listed on the command line to reload their configuration. Note that this will reload the
           service-specific configuration, not the unit configuration file of systemd. If you want systemd to reload
           the configuration file of a unit, use the daemon-reload command. In other words: for the example case of
           Apache, this will reload Apache's httpd.conf in the web server, not the apache.service systemd unit file.

           This command should not be confused with the daemon-reload command.

# reload the systemd unit file
[lisa@localhost ~]$ sudo systemctl daemon-reload



       enable UNIT..., enable PATH...
           Enable one or more units or unit instances. This will create a set of symlinks, as encoded in the
           "[Install]" sections of the indicated unit files. After the symlinks have been created, the system manager
           configuration is reloaded (in a way equivalent to daemon-reload), in order to ensure the changes are taken
           into account immediately. Note that this does not have the effect of also starting any of the units being
           enabled. If this is desired, combine this command with the --now switch, or invoke start with appropriate
           arguments later. Note that in case of unit instance enablement (i.e. enablement of units of the form
           foo@bar.service), symlinks named the same as instances are created in the unit configuration directory,
           however they point to the single template unit file they are instantiated from.

           This command expects either valid unit names (in which case various unit file directories are automatically
           searched for unit files with appropriate names), or absolute paths to unit files (in which case these files
           are read directly). If a specified unit file is located outside of the usual unit file directories, an
           additional symlink is created, linking it into the unit configuration path, thus ensuring it is found when
           requested by commands such as start. The file system where the linked unit files are located must be
           accessible when systemd is started (e.g. anything underneath /home or /var is not allowed, unless those
           directories are located on the root file system).

           This command will print the file system operations executed. This output may be suppressed by passing
           --quiet.

           Note that this operation creates only the symlinks suggested in the "[Install]" section of the unit files.
           While this command is the recommended way to manipulate the unit configuration directory, the administrator
           is free to make additional changes manually by placing or removing symlinks below this directory. This is
           particularly useful to create configurations that deviate from the suggested default installation. In this
           case, the administrator must make sure to invoke daemon-reload manually as necessary, in order to ensure
           the changes are taken into account.

           Enabling units should not be confused with starting (activating) units, as done by the start command.
           Enabling and starting units is orthogonal: units may be enabled without being started and started without
           being enabled. Enabling simply hooks the unit into various suggested places (for example, so that the unit
           is automatically started on boot or when a particular kind of hardware is plugged in). Starting actually
           spawns the daemon process (in case of service units), or binds the socket (in case of socket units), and so
           on.

           Depending on whether --system, --user, --runtime, or --global is specified, this enables the unit for the
           system, for the calling user only, for only this boot of the system, or for all future logins of all users.
           Note that in the last case, no systemd daemon configuration is reloaded.

           Using enable on masked units is not supported and results in an error.


       --now
           When used with enable, the units will also be started. When used with disable or mask, the units will also
           be stopped. The start or stop operation is only carried out when the respective enable or disable operation
           has been successful.



# start and enable the container service
# this starts a new container based on root-container.service

[lisa@localhost ~]$ sudo systemctl enable --now root-container
Created symlink /etc/systemd/system/multi-user.target.wants/root-container.service → /etc/systemd/system/root-container.service.
Created symlink /etc/systemd/system/default.target.wants/root-container.service → /etc/systemd/system/root-container.service.


[lisa@localhost ~]$ sudo systemctl status root-container
● root-container.service - Podman container-root-container.service
   Loaded: loaded (/etc/systemd/system/root-container.service; enabled; vendor preset: disabled)
   Active: active (running) since Sat 2021-03-20 16:25:55 MDT; 1min 44s ago
     Docs: man:podman-generate-systemd(1)
  Process: 49352 ExecStart=/usr/bin/podman run --conmon-pidfile /run/container-root-container.pid --cidfile /run/containe>
  Process: 49350 ExecStartPre=/bin/rm -f /run/container-root-container.pid /run/container-root-container.ctr-id (code=exi>
 Main PID: 49431 (conmon)
    Tasks: 2 (limit: 11099)
   Memory: 4.0M
   CGroup: /system.slice/root-container.service
           └─49431 /usr/bin/conmon --api-version 1 -c d72192425b3a8771e5070e65b43397b34a752d1fb605875871e804a1edb0ae2e -u>

Mar 20 16:25:54 localhost.localdomain systemd[1]: Starting Podman container-root-container.service...
Mar 20 16:25:55 localhost.localdomain podman[49352]: d72192425b3a8771e5070e65b43397b34a752d1fb605875871e804a1edb0ae2e
Mar 20 16:25:55 localhost.localdomain systemd[1]: Started Podman container-root-container.service.




# verify

[lisa@localhost ~]$ sudo podman ps
CONTAINER ID  IMAGE                                   COMMAND    CREATED        STATUS            PORTS   NAMES
d72192425b3a  registry.access.redhat.com/ubi8:latest  /bin/bash  4 minutes ago  Up 4 minutes ago          root-container


# restart root-container.service
# It removes the container and lanuches a new one

[lisa@localhost ~]$ sudo systemctl restart root-container
[lisa@localhost ~]$ sudo systemctl status root-container
● root-container.service - Podman container-root-container.service
   Loaded: loaded (/etc/systemd/system/root-container.service; enabled; vendor preset: disabled)
   Active: active (running) since Sat 2021-03-20 16:31:12 MDT; 4s ago
     Docs: man:podman-generate-systemd(1)
  Process: 49711 ExecStopPost=/usr/bin/podman rm --ignore -f --cidfile /run/container-root-container.ctr-id (code=exited,>
  Process: 49596 ExecStop=/usr/bin/podman stop --ignore --cidfile /run/container-root-container.ctr-id -t 10 (code=exited>
  Process: 49767 ExecStart=/usr/bin/podman run --conmon-pidfile /run/container-root-container.pid --cidfile /run/containe>
  Process: 49764 ExecStartPre=/bin/rm -f /run/container-root-container.pid /run/container-root-container.ctr-id (code=exi>
 Main PID: 49848 (conmon)
    Tasks: 2 (limit: 11099)
   Memory: 2.9M
   CGroup: /system.slice/root-container.service
           └─49848 /usr/bin/conmon --api-version 1 -c 08632066430d88b8a5613b90d6bc22db68fb489126aeab415d891d62542c374b -u>

Mar 20 16:31:11 localhost.localdomain systemd[1]: Starting Podman container-root-container.service...
Mar 20 16:31:12 localhost.localdomain podman[49767]: 08632066430d88b8a5613b90d6bc22db68fb489126aeab415d891d62542c374b
Mar 20 16:31:12 localhost.localdomain systemd[1]: Started Podman container-root-container.service.


[lisa@localhost ~]$ sudo podman ps
CONTAINER ID  IMAGE                                   COMMAND    CREATED         STATUS             PORTS   NAMES
08632066430d  registry.access.redhat.com/ubi8:latest  /bin/bash  28 seconds ago  Up 27 seconds ago          root-container