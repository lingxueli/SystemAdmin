[root@localhost ~]# man -k "file system"
[root@localhost ~]# man -k filesystem
mkfs (8)             - build a Linux filesystem
mkfs.ext2 (8)        - create an ext2/ext3/ext4 filesystem
mkfs.ext3 (8)        - create an ext2/ext3/ext4 filesystem
mkfs.ext4 (8)        - create an ext2/ext3/ext4 filesystem
mkfs.fat (8)         - create an MS-DOS filesystem under Linux
mkfs.minix (8)       - make a Minix filesystem
mkfs.msdos (8)       - create an MS-DOS filesystem under Linux
mkfs.vfat (8)        - create an MS-DOS filesystem under Linux
mkfs.xfs (8)         - construct an XFS filesystem

[root@localhost ~]# man mkfs
MKFS(8)                                    System Administration                                    MKFS(8)

NAME
       mkfs - build a Linux filesystem

SYNOPSIS
       mkfs [options] [-t type] [fs-options] device [size]

DESCRIPTION
       This mkfs frontend is deprecated in favour of filesystem specific mkfs.<type> utils.


OPTIONS
       -t, --type type
              Specify  the  type  of filesystem to be built.  If not specified, the default filesystem type
              (currently ext2) is used.
              
              
[root@localhost ~]# man mkfs.ext4

DESCRIPTION
       mke2fs  is  used  to create an ext2, ext3, or ext4 filesystem, usually in a disk partition (or file)
       named by device.

       The file system size is specified by fs-size.  If fs-size does not have a suffix, it is  interpreted
       as  power-of-two  kilobytes,  unless  the -b blocksize option is specified, in which case fs-size is
       interpreted as the number of blocksize blocks.   If the fs-size is suffixed by 'k',  'm',  'g',  't'
       (either  upper-case  or  lower-case),  then  it is interpreted in power-of-two kilobytes, megabytes,
       gigabytes, terabytes, etc.  If fs-size is omitted, mke2fs will create the file system based  on  the
       device size.

       If  mke2fs  is  run  as  mkfs.XXX  (i.e.,  mkfs.ext2,  mkfs.ext3, or mkfs.ext4) the option -t XXX is
       implied; so mkfs.ext3 will create a file system for use with ext3, mkfs.ext4 will create a file sys‚Äê
       tem for use with ext4, and so on.

[root@localhost lisa]# blkid
/dev/nvme0n1p1: UUID="5c786174-e864-4c37-a912-b92b4a4b138e" BLOCK_SIZE="4096" TYPE="ext4" PARTUUID="39947a2a-01"
/dev/nvme0n1p2: UUID="kGln2P-dcGK-y2I4-Izd1-cH9v-s1iu-cZ0ppd" TYPE="LVM2_member" PARTUUID="39947a2a-02"
/dev/nvme0n1p3: UUID="5bf6a3dc-0a2f-4ca8-b2e9-787052b37f7d" TYPE="swap" PARTUUID="39947a2a-03"
/dev/sr0: BLOCK_SIZE="2048" UUID="2020-07-01-14-18-37-00" LABEL="RHEL-8-3-0-BaseOS-x86_64" TYPE="iso9660" PTUUID="304890b8" PTTYPE="dos"
/dev/mapper/rhel-root: UUID="e1ba3ec0-b483-486f-9f80-253616c07782" BLOCK_SIZE="512" TYPE="xfs"
/dev/nvme0n1: PTUUID="39947a2a" PTTYPE="dos"
/dev/nvme0n1p5: PARTUUID="39947a2a-05"
/dev/nvme0n2: PTUUID="8d6c58a6-05ee-4241-b406-5e95d6df368e" PTTYPE="gpt"
/dev/nvme0n2p1: PARTLABEL="part1" PARTUUID="22f65af7-45e4-4561-ae7f-ec7c8095474a"

[root@localhost lisa]# mkfs -t xfs /dev/nvme0n1p5
meta-data=/dev/nvme0n1p5         isize=512    agcount=4, agsize=6400 blks
         =                       sectsz=512   attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=0
         =                       reflink=1
data     =                       bsize=4096   blocks=25600, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=1368, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0

[root@localhost lisa]# blkid
/dev/nvme0n1p1: UUID="5c786174-e864-4c37-a912-b92b4a4b138e" BLOCK_SIZE="4096" TYPE="ext4" PARTUUID="39947a2a-01"
/dev/nvme0n1p2: UUID="kGln2P-dcGK-y2I4-Izd1-cH9v-s1iu-cZ0ppd" TYPE="LVM2_member" PARTUUID="39947a2a-02"
/dev/nvme0n1p3: UUID="5bf6a3dc-0a2f-4ca8-b2e9-787052b37f7d" TYPE="swap" PARTUUID="39947a2a-03"
/dev/sr0: BLOCK_SIZE="2048" UUID="2020-07-01-14-18-37-00" LABEL="RHEL-8-3-0-BaseOS-x86_64" TYPE="iso9660" PTUUID="304890b8" PTTYPE="dos"
/dev/mapper/rhel-root: UUID="e1ba3ec0-b483-486f-9f80-253616c07782" BLOCK_SIZE="512" TYPE="xfs"
/dev/nvme0n1: PTUUID="39947a2a" PTTYPE="dos"
/dev/nvme0n1p5: UUID="607af5fd-35df-4fbf-b61e-9b6a038ee663" BLOCK_SIZE="512" TYPE="xfs" PARTUUID="39947a2a-05"
/dev/nvme0n2: PTUUID="8d6c58a6-05ee-4241-b406-5e95d6df368e" PTTYPE="gpt"
/dev/nvme0n2p1: PARTLABEL="part1" PARTUUID="22f65af7-45e4-4561-ae7f-ec7c8095474a"

[root@localhost lisa]# mkfs -t ext4 /dev/nvme0n1p5
mke2fs 1.45.6 (20-Mar-2020)
/dev/nvme0n1p5 contains a xfs file system
Proceed anyway? (y,N) y
Creating filesystem with 102400 1k blocks and 25688 inodes
Filesystem UUID: 4ff33ec1-d7d4-47ec-89b3-309dd08fadd8
Superblock backups stored on blocks: 
	8193, 24577, 40961, 57345, 73729

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done 

[root@localhost lisa]# mkfs.xfs /dev/nvme0n1p5
mkfs.xfs: /dev/nvme0n1p5 appears to contain an existing filesystem (ext4).
mkfs.xfs: Use the -f option to force overwrite.
[root@localhost lisa]# mkfs.xfs -f /dev/nvme0n1p5
meta-data=/dev/nvme0n1p5         isize=512    agcount=4, agsize=6400 blks
         =                       sectsz=512   attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=0
         =                       reflink=1
data     =                       bsize=4096   blocks=25600, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=1368, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0

[root@localhost lisa]# blkid
/dev/nvme0n1p1: UUID="5c786174-e864-4c37-a912-b92b4a4b138e" BLOCK_SIZE="4096" TYPE="ext4" PARTUUID="39947a2a-01"
/dev/nvme0n1p2: UUID="kGln2P-dcGK-y2I4-Izd1-cH9v-s1iu-cZ0ppd" TYPE="LVM2_member" PARTUUID="39947a2a-02"
/dev/nvme0n1p3: UUID="5bf6a3dc-0a2f-4ca8-b2e9-787052b37f7d" TYPE="swap" PARTUUID="39947a2a-03"
/dev/sr0: BLOCK_SIZE="2048" UUID="2020-07-01-14-18-37-00" LABEL="RHEL-8-3-0-BaseOS-x86_64" TYPE="iso9660" PTUUID="304890b8" PTTYPE="dos"
/dev/mapper/rhel-root: UUID="e1ba3ec0-b483-486f-9f80-253616c07782" BLOCK_SIZE="512" TYPE="xfs"
/dev/nvme0n1p5: UUID="9d2fd572-f810-481a-a737-1d90c25d1141" BLOCK_SIZE="512" TYPE="xfs" PARTUUID="39947a2a-05"
/dev/nvme0n1: PTUUID="39947a2a" PTTYPE="dos"
/dev/nvme0n2: PTUUID="8d6c58a6-05ee-4241-b406-5e95d6df368e" PTTYPE="gpt"
/dev/nvme0n2p1: PARTLABEL="part1" PARTUUID="22f65af7-45e4-4561-ae7f-ec7c8095474a"

[root@localhost lisa]# mkfs.ext4 /dev/nvme0n2p1
mke2fs 1.45.6 (20-Mar-2020)
Creating filesystem with 261883 4k blocks and 65536 inodes
Filesystem UUID: 21ff5b69-ca81-4399-ad85-e49ab628b02a
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done