for regexes in sed and grep and most standard Unix tools

man 7 regex tells you about regexes used in sed, grep, and most standard tools.

$ man 7 regex

REGEX(7)                                       Linux Programmer's Manual                                       REGEX(7)

NAME
       regex - POSIX.2 regular expressions

DESCRIPTION
       Regular  expressions  ("RE"s),  as  defined  in  POSIX.2, come in two forms: modern REs (roughly those of egrep;
       POSIX.2 calls these "extended" REs) and obsolete REs (roughly those of ed(1); POSIX.2  "basic"  REs).   Obsolete
       REs  mostly  exist  for backward compatibility in some old programs; they will be discussed at the end.  POSIX.2
       leaves some aspects of RE syntax and semantics open; "(!)" marks decisions on these  aspects  that  may  not  be
       fully portable to other POSIX.2 implementations.


       A (modern) RE is one(!) or more nonempty(!) branches, separated by '|'.  It matches anything that matches one of
       the branches.
       
       => multiple patterns
       
       A branch is one(!) or more pieces, concatenated.  It matches a match for the first, followed by a match for  the
       second, and so on.

       A  piece is an atom possibly followed by a single(!) '*', '+', '?', or bound.  An atom followed by '*' matches a
       sequence of 0 or more matches of the atom.  An atom followed by '+' matches a sequence of 1 or more  matches  of
       the atom.  An atom followed by '?' matches a sequence of 0 or 1 matches of the atom.

       => multipliers:
       '*' matches a sequence of 0 or more
       '+' matches a sequence of 1 or more
       '?' matches a sequence of 0 or 1
       
       
       A  bound  is  '{' followed by an unsigned decimal integer, possibly followed by ',' possibly followed by another
       unsigned decimal integer, always followed by '}'.  The integers must  lie  between  0  and  RE_DUP_MAX  (255(!))
       inclusive,  and if there are two of them, the first may not exceed the second.  An atom followed by a bound con‐
       taining one integer i and no comma matches a sequence of exactly i matches of the atom.  An atom followed  by  a
       bound  containing  one  integer i and a comma matches a sequence of i or more matches of the atom.  An atom fol‐
       lowed by a bound containing two integers i and j matches a sequence of i through j (inclusive)  matches  of  the
       atom.

        => multipliers
        '{'  decimal integer, possibly followed by ',' possibly followed by another
       unsigned decimal integer '}'
        
        

       An  atom is a regular expression enclosed in "()" (matching a match for the regular expression), an empty set of
       "()" (matching the null string)(!), a bracket expression (see below), '.' (matching any single  character),  '^'
       (matching  the  null  string at the beginning of a line), '$' (matching the null string at the end of a line), a
       '\' followed by one of the characters "^.[$()|*+?{\" (matching that character taken as an ordinary character), a
       '\'  followed  by any other character(!)  (matching that character taken as an ordinary character, as if the '\'
       had not been present(!)), or a single character with no other significance (matching  that  character).   A  '{'
       followed  by  a  character  other than a digit is an ordinary character, not the beginning of a bound(!).  It is
       illegal to end an RE with '\'.

       => wildcards
       '.' (matching any single  character)
       
       
       => line anchor
       '^' (matching  the  null  string at the beginning of a line), '$' (matching the null string at the end of a line)
See the man page for the tool itself as well, because there might be some exceptions.


       => escape the special character that has a meaning for regex
       '\' followed by one of the characters "^.[$()|*+?{\" (matching that character taken as an ordinary character)
       

       A bracket expression is a list of characters enclosed in "[]".  It normally matches any  single  character  from
       the list (but see below).  If the list begins with '^', it matches any single character (but see below) not from
       the rest of the list.  If two characters in the list are separated by '-', this is shorthand for the full  range
       of characters between those two (inclusive) in the collating sequence, for example, "[0-9]" in ASCII matches any
       decimal digit.  It is illegal(!) for two ranges to share an endpoint, for example,  "a-c-e".   Ranges  are  very
       collating-sequence-dependent, and portable programs should avoid relying on them.

       => wildcards:
       a list of characters enclosed in "[]".  It normally matches any  single  character  from
       the list

       If the list begins with '^', it matches any single character (but see below) not from
       the rest of the list

       two characters in the list are separated by '-', this is shorthand for the full  range
       of characters between those two


       Within  a bracket expression, a collating element (a character, a multicharacter sequence that collates as if it
       were a single character, or a collating-sequence name for either) enclosed in  "[."  and  ".]"  stands  for  the
       sequence  of characters of that collating element.  The sequence is a single element of the bracket expression's
       list.  A bracket expression containing a multicharacter collating element can thus match more than  one  charac‐
       ter,  for example, if the collating sequence includes a "ch" collating element, then the RE "[[.ch.]]*c" matches
       the first five characters of "chchcc".

       => [.ch.]  
       Within a bracket expression, a collating element enclosed in "[=" and "=]" is an equivalence class, standing for
       the  sequences  of characters of all collating elements equivalent to that one, including itself.  (If there are
       no other equivalent collating elements, the treatment is as if the enclosing delimiters  were  "[."  and  ".]".)
       For  example,  if o and ^ are the members of an equivalence class, then "[[=o=]]", "[[=^=]]", and "[o^]" are all
       synonymous.  An equivalence class may not(!) be an endpoint of a range.
       
       => [=^=]

       Within a bracket expression, the name of a character class enclosed in "[:" and ":]" stands for the list of  all
       characters belonging to that class.  Standard character class names are:

              alnum   digit   punct
              alpha   graph   space
              blank   lower   upper
              cntrl   print   xdigit

       These stand for the character classes defined in wctype(3).  A locale may provide others.  A character class may
       not be used as an endpoint of a range.

        => [:digit:]
...


for regexes in other tools

Many tools that didn't originally come with Unix have their own syntax.

For example, for perl look at man perlre and for vim type :help pattern from inside vim.

$ man perlre
$ vim
:help pattern

for shell patterns => not the same thing as regex

Also known as wildcards or globs.

man bash then type /Pathname Expansion<Enter>.

$ man bash
/Pathname Expansion

       Pattern Matching

       Any  character  that  appears  in  a pattern, other than the special pattern characters described below, matches
       itself.  The NUL character may not occur in a pattern.  A backslash escapes the following character; the  escap‐
       ing  backslash  is  discarded  when  matching.   The special pattern characters must be quoted if they are to be
       matched literally.

       The special pattern characters have the following meanings:

              *      Matches any string, including the null string.  When the globstar shell option is enabled,  and  *
                     is  used  in a pathname expansion context, two adjacent *s used as a single pattern will match all
                     files and zero or more directories and subdirectories.  If followed by a /, two adjacent  *s  will
                     match only directories and subdirectories.
              ?      Matches any single character.
              [...]  Matches  any one of the enclosed characters.  A pair of characters separated by a hyphen denotes a
                     range expression; any character that falls between those two characters, inclusive, using the cur‐
                     rent  locale's collating sequence and character set, is matched.  If the first character following
                     the [ is a !  or a ^ then any character not enclosed is matched.  The sorting order of  characters
                     in  range  expressions  is  determined  by  the current locale and the values of the LC_COLLATE or
                     LC_ALL shell variables, if set.  To obtain the traditional interpretation  of  range  expressions,
                     where  [a-d]  is  equivalent to [abcd], set value of the LC_ALL shell variable to C, or enable the
                     globasciiranges shell option.  A - may be matched by including it as the first or  last  character
                     in the set.  A ] may be matched by including it as the first character in the set.

                     Within  [ and ], character classes can be specified using the syntax [:class:], where class is one
                     of the following classes defined in the POSIX standard:
                     alnum alpha ascii blank cntrl digit graph lower print punct space upper word xdigit
                     A character class matches any character belonging to that class.  The word character class matches
                     letters, digits, and the character _.


Or better yet, if info is installed, info bash will get you exactly the same information as the link in your question.

You can drill down to the section manually, or get there directly by running:

info bash 'Basic Shell Features' 'Shell Expansions' 'Filename Expansion' 'Pattern Matching'
