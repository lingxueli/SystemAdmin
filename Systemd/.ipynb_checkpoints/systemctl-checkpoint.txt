$ man systemctl
SYSTEMCTL(1)                                                     systemctl                                                    SYSTEMCTL(1)

NAME
       systemctl - Control the systemd system and service manager

SYNOPSIS
       systemctl [OPTIONS...] COMMAND [UNIT...]


COMMANDS
       The following commands are understood:

       -t, --type=
           The argument should be a comma-separated list of unit types such as service and socket.

           If one of the arguments is a unit type, when listing units, limit display to certain unit types. Otherwise, units of all types
           will be shown.

           As a special case, if one of the arguments is help, a list of allowed values will be printed and the program will exit.

       --state=
           The argument should be a comma-separated list of unit LOAD, SUB, or ACTIVE states. When listing units, show only those in the
           specified states. Use --state=failed to show only failed units.

           As a special case, if one of the arguments is help, a list of allowed values will be printed and the program will exit.

       -l, --full
           Do not ellipsize unit names, process tree entries, journal output, or truncate unit descriptions in the output of status,
           list-units, list-jobs, and list-timers.

           Also, show installation targets in the output of is-enabled.


   Unit Commands
       list-units [PATTERN...]

           List units that systemd currently has in memory. The units that are shown are additionally filtered
           by --type= and --state= if those options are specified.

           ...
           
           
           Produces output similar to

                 UNIT                         LOAD   ACTIVE SUB     DESCRIPTION
                 sys-module-fuse.device       loaded active plugged /sys/module/fuse
                 -.mount                      loaded active mounted Root Mount
                 boot-efi.mount               loaded active mounted /boot/efi
                 systemd-journald.service     loaded active running Journal Service
           
           The LOAD column shows the load state, one of loaded, not-found, bad-setting, error, masked. The ACTIVE columns shows the general unit state, one of active, reloading, inactive, failed, activating, deactivating. The SUB column shows the unit-type-specific detailed state of the unit, possible values vary by unit type. The list of possible LOAD, ACTIVE, and SUB states is not constant and new systemd releases may both add and remove values.

               systemctl --state=help

           command maybe be used to display the current set of possible values.
           
       list-dependencies [UNIT]
           Shows units required and wanted by the specified unit. This recursively lists units following the Requires=, Requisite=, ConsistsOf=, Wants=, BindsTo= dependencies. If no unit is specified, default.target is implied.

           By default, only target units are recursively expanded. When --all is passed, all other units are recursively expanded as well.

           Options --reverse, --after, --before may be used to change what types of dependencies are shown.


       stop PATTERN...
           Stop (deactivate) one or more units specified on the command line.

       reload PATTERN...
           Asks all units listed on the command line to reload their configuration. Note that this will reload the service-specific configuration, not the unit configuration file of systemd. If you want systemd to reload the configuration file of a unit, use the daemon-reload command. In other words: for the example case of Apache, this will reload Apache's httpd.conf in the web server, not the apache.service systemd unit file.

           This command should not be confused with the daemon-reload command.

       restart PATTERN...
           Stop and then start one or more units specified on the command line. If the units are not running yet, they will be started.

       status [PATTERN...|PID...]]
           Show terse runtime status information about one or more units, followed by most recent log data from the journal. If no units are specified, show system status. If combined with --all, also show the status of all units (subject to limitations specified with -t). If a PID is passed, show information about the unit the process belongs to.


       show [PATTERN...|JOB...]
           Show properties of one or more units, jobs, or the manager itself. If no argument is specified, properties of the manager will be shown. If a unit name is specified, properties of the unit are shown, and if a job ID is specified, properties of the job are shown. By default, empty properties are suppressed. Use --all to show those too. To select specific properties to show, use --property=. This command is intended to be used whenever computer-parsable output is required.

       edit UNIT...
           Edit a drop-in snippet or a whole replacement file if --full is specified, to extend or override the specified unit.



$ systemctl --state=help
Available unit load states:
stub
loaded
not-found
bad-setting
error
merged
masked

Available unit active states:
active
reloading
inactive
failed
activating
deactivating

Available service unit substates:
dead
condition
start-pre
start
start-post
running
exited
reload
stop
stop-sigabrt
stop-sigterm
stop-sigkill
stop-post
final-sigterm
final-sigkill
failed
auto-restart

Available socket unit substates:
dead
start-pre
start-chown
start-post
listening
running
stop-pre
stop-pre-sigterm
stop-pre-sigkill
stop-post
final-sigterm
final-sigkill
failed

Available target unit substates:
dead
active

....


# show active service unites

$ systemctl --type=service
$ systemctl list-units --type=service


# show inactive and active service units
$ systemctl list-units --type=service --all


# show all services that have failed
$ systemctl --failed --type=service


# show detailed status info about your.service

$ systemctl status httpd.service
● httpd.service - The Apache HTTP Server
   Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; vendor preset: disabled)
  Drop-In: /usr/lib/systemd/system/httpd.service.d
           └─php-fpm.conf
   Active: active (running) since Sat 2021-02-13 18:02:59 MST; 5 days ago
     Docs: man:httpd.service(8)
 Main PID: 1268 (httpd)
   Status: "Running, listening on: port 443, port 80"
    Tasks: 213 (limit: 11073)
   Memory: 11.4M
   CGroup: /system.slice/httpd.service
           ├─1268 /usr/sbin/httpd -DFOREGROUND
           ├─1396 /usr/sbin/httpd -DFOREGROUND
           ├─1399 /usr/sbin/httpd -DFOREGROUND
           ├─1403 /usr/sbin/httpd -DFOREGROUND
           └─1437 /usr/sbin/httpd -DFOREGROUND

Dependencies

Unit types such as socket and path are directly related to a service unit. access them will automatically trigger service unit.

Dependencies can be defined by keyword: Required, Requisit, Wants, After, Before.

# what are the dependencies of httpd
$ systemctl list-dependencies httpd
httpd.service
● ├─-.mount
● ├─httpd-init.service
● ├─php-fpm.service
● ├─system.slice
● └─sysinit.target
●   ├─dev-hugepages.mount
●   ├─dev-mqueue.mount

# what packages are dependent of httpd
$ systemctl list-dependencies --reverse httpd
httpd.service
● └─multi-user.target
●   └─graphical.target


Keywords used in unit file to define dependencies

$ man 5 systemd.unit

       Requires=
           Configures requirement dependencies on other units. If this unit gets activated, the units listed here will be activated as well. If one of the other units fails to activate, and an ordering dependency After= on the failing unit is set, this unit will
       
       Requisite=
           Similar to Requires=. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately.  Requisite= does not imply an ordering dependency, even if both units are started in the same transaction. Hence this setting should usually be combined with After=, to ensure this unit is not started before the other unit.


       Wants=
           A weaker version of Requires=. Units listed in this option will be started if the configuring unit is. However, if the listed units fail to start or cannot be added to the transaction, this has no impact on the validity of the transaction as a whole.

       Before=, After=
           They configure ordering dependencies between units.
           
           
Manage unit options

# what're the properties set for httpd
$ systemctl show httpd
Type=notify
Restart=no
NotifyAccess=main
RestartUSec=100ms
TimeoutStartUSec=1min 30s
TimeoutStopUSec=1min 30s
RuntimeMaxUSec=infinity
WatchdogUSec=0
WatchdogTimestamp=Sat 2021-02-13 18:02:59 MST
WatchdogTimestampMonotonic=67750272
PermissionsStartOnly=no
RootDirectoryStartOnly=no
RemainAfterExit=no
GuessMainPID=yes
MainPID=1268
ControlPID=0
FileDescriptorStoreMax=0
NFileDescriptorStore=0
StatusText=Running, listening on: port 443, port 80
StatusErrno=0

# If no argument is specified, properties of the manager will be shown.

$ systemctl show
Version=239 (239-41.el8_3.1)
Features=+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +K>
Virtualization=vmware
Architecture=x86-64
FirmwareTimestampMonotonic=0
LoaderTimestampMonotonic=0
KernelTimestamp=Sat 2021-02-13 18:01:51 MST
KernelTimestampMonotonic=0
InitRDTimestamp=Sat 2021-02-13 18:01:58 MST

If you want to change these options, you need to write to /etc/systemd/system by:

1. use systemctl edit httpd.service to change the default configuration

$ systemctl edit httpd
Editing "/etc/systemd/system/httpd.service.d/override.conf" canceled: temporary file is empty.

This file take precedence over the default config in /usr/lib/systemd/system
or
2. copy /usr/lib/systemd/system to /etc/systemd/system/, then make change


Example

$ yum install httpd
$ systemctl cat httpd.service		show current config of unit file
# /usr/lib/systemd/system/httpd.service
# See httpd.service(8) for more information on using the httpd service.

# Modifying this file in-place is not recommended, because changes
# will be overwritten during package upgrades.  To customize the
# behaviour, run "systemctl edit httpd" to create an override unit.

# For example, to pass additional options (such as -D definitions) to
# the httpd binary at startup, create an override unit (as is done by
# systemctl edit) and enter the following:

#       [Service]
#       Environment=OPTIONS=-DMY_DEFINE

[Unit]
Description=The Apache HTTP Server
Wants=httpd-init.service
After=network.target remote-fs.target nss-lookup.target httpd-init.service
Documentation=man:httpd.service(8)

[Service]
Type=notify
Environment=LANG=C

ExecStart=/usr/sbin/httpd $OPTIONS -DFOREGROUND
ExecReload=/usr/sbin/httpd $OPTIONS -k graceful




       cat PATTERN...
           Show backing files of one or more units. Prints the "fragment" and "drop-ins" (source files) of units. Each file is preceded by
           a comment which includes the file name. Note that this shows the contents of the backing files on disk, which may not match the
           system manager's understanding of these units if any unit files were updated on disk and the daemon-reload command wasn't
           issued since.

$ systemctl cat httpd.service

$ systemctl show httpd.service	show available config of unit file

$ systemctl edit httpd.service	write to /etc/systemd/system/httpd.service.d/override.conf, this file is appended to the default config

$ systemctl cat httpd.service 	you see default config + custom config, where custom overwrites the default config

$ systemctl daemon-reload			reload systemd to pick up the new configuration(reload: process the unit files) 
            
            
       reload PATTERN...            ### reload systemd unit
           Asks all units listed on the command line to reload their configuration. Note that this will reload the service-specific configuration, not the unit configuration file of systemd. If you want systemd to reload the configuration file of a unit, use the daemon-reload command. In other words: for the example case of Apache, this will reload Apache's httpd.conf in the web server, not the apache.service systemd unit file.

           This command should not be confused with the daemon-reload command.
           
       daemon-reload               ### reload systemd manager
           Reload the systemd manager configuration. This will rerun all generators (see systemd.generator(7)), reload all unit files, and recreate the entire dependency tree. While the daemon is being reloaded, all sockets systemd listens on behalf of user configuration will stay accessible.

           This command should not be confused with the reload command.


$ systemctl restart httpd			restart the service
$ systemctl status httpd			verify it's active