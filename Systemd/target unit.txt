# common sections in all types of units

[UNIT] SECTION OPTIONS
       Unit file may include a [Unit] section, which carries generic information about the unit that is not dependent on the type of unit:
       
       Before=, After=           ### it determines the order to start up/shut down the units
           Configures ordering dependencies between units. 
           If a unit foo.service contains a setting Before=bar.service and both units are being started, bar.service's start-up is delayed until foo.service is started up. 
           
           Note that this setting is independent of and orthogonal to the requirement dependencies as configured by Requires=. It is a common pattern to include a unit name in both the After= and Requires= option, in which case the unit listed will be started before the unit that is configured with these options.
           
           After= is the inverse of Before=, i.e. while After= ensures that the configured unit is started after the listed unit finished starting up, Before= ensures the opposite, i.e. that the configured unit is fully started up before the listed unit is started. 
           Note that when two units with an ordering dependency between them are shut down, the inverse of the start-up order is applied. i.e. if a unit is configured with After= on another unit, the former is stopped before the latter if both are shut down. If one unit with an ordering dependency on another unit is shut down while the latter is started up, the shut down is ordered before the start-up regardless of whether the ordering dependency is actually of type After= or Before=.

       Requires=               ### it determins the dependencies with no requirement of the ordering
                               ### /.requires directory is created
           Configures requirement dependencies on other units. If this unit gets activated, the units listed here will be activated as well. If one of the other units gets deactivated or its activation fails, this unit will be deactivated. 
           
           Note that requirement dependencies do not influence the order in which services are started or stopped. This has to be configured independently with the After= or Before= options. 
           
           If a unit foo.service requires a unit bar.service as configured with Requires= and no ordering is configured with After= or Before=, then both units will be started simultaneously and without any delay between them if foo.service is activated. Often it is a better choice to use Wants= instead of Requires= in order to achieve a system that is more robust when dealing with failing services.

           Note that dependencies of this type may also be configured outside of the unit configuration file by adding a symlink to a .requires/ directory accompanying the unit file. For details see above.

       Wants=                 ### it determines desired dependencies - if missing, there's no impact on its integrity. 
                              ### it doesn't specify the ordering.
                              ### /.wants directory is created
           A weaker version of Requires=. Units listed in this option will be
           started if the configuring unit is. However, if the listed units
           fail to start or cannot be added to the transaction, this has no
           impact on the validity of the transaction as a whole. This is the
           recommended way to hook start-up of one unit to the start-up of
           another unit.

           Note that dependencies of this type may also be configured outside
           of the unit configuration file by adding symlinks to a .wants/
           directory accompanying the unit file. For details, see above.

[INSTALL] SECTION OPTIONS
       Unit file may include an "[Install]" section, which carries installation information for the unit. This section is not interpreted by systemd(1) during runtime. It is used exclusively by the enable and disable commands of the systemctl(1) tool during installation of a unit:

       WantedBy=, RequiredBy=     ### the same effect as Wants, Requires
                                  ### bar.service: WantedBy=foo.service translates to the symbolic link
                                  ### /etc/systemd/system/foo.service.wants/bar.service -> /usr/lib/systemd/system/bar.service
           This option may be used more than once, or a space-separated list of unit names may be given. A symbolic link is created in the .wants/ or .requires/ directory of each of the listed units when this unit is installed by systemctl enable. This has the effect that a dependency of type Wants= or Requires= is added from the listed unit to the current unit. The primary result is that the current unit will be started when the listed unit is started. See the description of Wants= and Requires= in the [Unit] section for details.

           WantedBy=foo.service in a service bar.service is mostly equivalent to Alias=foo.service.wants/bar.service in the same file. In case of template units, systemctl enable must be called with an instance name, and this instance will be added to the .wants/ or .requires/ list of the listed unit. E.g.  WantedBy=getty.target in a service getty@tty2.service will result in systemctl enable getty@tty2.service creating a getty.target.wants/getty@tty2.service link to getty@tty2.service.
           
EXAMPLES
       Example 1. Allowing units to be enabled

       The following snippet (highlighted) allows a unit (e.g.  foo.service) to be enabled via systemctl enable:

           [Unit]
           Description=Foo

           [Service]
           ExecStart=/usr/sbin/foo-daemon

           [Install]
           WantedBy=multi-user.target

       After running systemctl enable, a symlink /etc/systemd/system/multi-user.target.wants/foo.service linking to the actual unit will be created. It tells systemd to pull in the unit when starting multi-user.target. The inverse systemctl disable will remove that symlink again.


### in .wants directory, multiple symbolic links for services are created, which point to the actual service files.


[root@localhost lisa]# ls -al  /etc/systemd/system/multi-user.target.wants/
total 8
drwxr-xr-x.  2 root root 4096 Mar 20 16:25 .
drwxr-xr-x. 24 root root 4096 Mar 20 16:08 ..
lrwxrwxrwx.  1 root root   35 Jan 22 23:52 atd.service -> /usr/lib/systemd/system/atd.service
lrwxrwxrwx.  1 root root   38 Jan 22 23:39 auditd.service -> /usr/lib/systemd/system/auditd.service
lrwxrwxrwx.  1 root root   44 Jan 22 23:46 avahi-daemon.service -> /usr/lib/systemd/system/avahi-daemon.service
lrwxrwxrwx.  1 root root   39 Jan 25 00:06 chronyd.service -> /usr/lib/systemd/system/chronyd.service
lrwxrwxrwx.  1 root root   37 Jan 22 23:39 crond.service -> /usr/lib/systemd/system/crond.service
lrwxrwxrwx.  1 root root   33 Jan 22 23:48 cups.path -> /usr/lib/systemd/system/cups.path
lrwxrwxrwx.  1 root root   36 Jan 22 23:48 cups.service -> /usr/lib/systemd/system/cups.service




# target unit

$ man -k systemd | grep target
systemd.target (5)   - Target unit configuration
$ man 5 systemd.target
SYSTEMD.TARGET(5)                                                 systemd.target                                                 SYSTEMD.TARGET(5)

NAME
       systemd.target - Target unit configuration

SYNOPSIS
       target.target

DESCRIPTION
       A unit configuration file whose name ends in ".target" encodes information about a target unit of systemd, which is used for grouping units and as well-known synchronization points during start-up.

       This unit type has no specific options. See systemd.unit(5) for the common options of all unit configuration files. The common configuration items are configured in the generic [Unit] and [Install] sections. A separate [Target] section does not exist, since no target-specific options may be configured.

       Target units do not offer any additional functionality on top of the generic functionality provided by units. They exist merely to group units via dependencies (useful as boot targets), and to establish standardized names for synchronization points used in dependencies between units. Among other things, target units are a more flexible replacement for SysV runlevels in the classic SysV init system. (And for compatibility reasons special target units such as runlevel3.target exist which are used by the SysV runlevel compatibility code in systemd. See systemd.special(7) for details).

       Unless DefaultDependencies= is set to false, target units will implicitly complement all configured dependencies of type Wants=, Requires=,
       RequiresOverridable= with dependencies of type After= if the units in question also have DefaultDependencies=true.

SEE ALSO
       systemd(1), systemctl(1), systemd.unit(5), systemd.special(7), systemd.directives(7)
       
       
[root@localhost ~]# systemctl cat multi-user.target 
# /usr/lib/systemd/system/multi-user.target
#  SPDX-License-Identifier: LGPL-2.1+
#
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.

[Unit]
Description=Multi-User System
Documentation=man:systemd.special(7)
Requires=basic.target
Conflicts=rescue.service rescue.target
After=basic.target rescue.service rescue.target
AllowIsolate=yes