vim stands for vi improved. It has vast amount of commands. Remembering the essentials are important.

vimtutor command opens a vim tutorial. To install: 

yum install vim-enhanced


Here're the essentails:

1. They're two modes of vim: command mode, and input mode. To switch the mode:

    Esc switch from input mode to command mode, press this before typing any command

    i, a switch form command mode to input mode
        i insert at the current cursor
        a insert after the current cursor

    o open a new lin below the cursor and goes to input mode


2. File operations:

    :wq save and quit
    :q! quit
    :w filename: save as "filename"


3. Edit operations:
    
    dd delete the current line
    yy copy the current line
    p paste the current selection
    v enter visual mode, where you could select a block of text using arrow kyes. Later you could use d to cut the selection or y to copy it, p to paste it
    u undo the last command
    Ctrl-r redo the last command

$ vimtutor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        Lesson 6.4: COPY AND PASTE TEXT


          ** Use the  y  operator to copy text and  p  to paste it **

  1. Go to the line marked with ---> below and place the cursor after "a)".

  2. Start Visual mode with  v  and move the cursor to just before "first".

  3. Type  y  to yank (copy) the highlighted text.

  4. Move the cursor to the end of the next line:  j$

  5. Type  p  to put (paste) the text.  Then type:  a second <ESC> .

  6. Use Visual mode to select " item.", yank it with  y , move to the end of
     the next line with  j$  and put the text there with  p .

--->  a) this is the first item.
      b)

  NOTE: you can also use  y  as an operator;  yw  yanks one word.



4. navigation:
    
    gg go to the first line of the document
    G go to the last line of the document
    
    ^ go to the first position in the current line
    $ go to the last position in the current line
    
    :3 go to line number 3
    
5. search and replace

    /text serach for text from the current cursor forward
    ?text search for text from the current cursor backward
    ! ls show the output of ls(or any other command) in the current file.
    :%s/old/new/g  replace all occurrences of old with new


$ vimtutor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      Lesson 4.4: THE SUBSTITUTE COMMAND


        ** Type  :s/old/new/g  to substitute 'new' for 'old'. **

  1. Move the cursor to the line below marked --->.

  2. Type  :s/thee/the <ENTER> .  Note that this command only changes the
     first occurrence of "thee" in the line.

  3. Now type  :s/thee/the/g .  Adding the  g  flag means to substitute
     globally in the line, change all occurrences of "thee" in the line.

---> the best time to see the flowers is in the spring.

  4. To change every occurrence of a character string between two lines,
     type   :#,#s/old/new/g    where #,# are the line numbers of the range
                               of lines where the substitution is to be done.
     Type   :%s/old/new/g      to change every occurrence in the whole file.
     Type   :%s/old/new/gc     to find every occurrence in the whole file,
                               with a prompt whether to substitute or not.
                               
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Lesson 5.1: HOW TO EXECUTE AN EXTERNAL COMMAND


   ** Type  :!  followed by an external command to execute that command. **

  1. Type the familiar command  :  to set the cursor at the bottom of the
     screen.  This allows you to enter a command-line command.

  2. Now type the  !  (exclamation point) character.  This allows you to
     execute any external shell command.

  3. As an example type   ls   following the ! and then hit <ENTER>.  This
     will show you a listing of your directory, just as if you were at the
     shell prompt.  Or use  :!dir  if ls doesn't work.

NOTE:  It is possible to execute any external command this way, also with
       arguments.

NOTE:  All  :  commands must be finished by hitting <ENTER>
       From here on we will not always mention it.



How to remember these commands?

$ vimtutor

Dependency
$ yum install vim-enhanced

[root@localhost lisa]# yum list --all | grep vim
vim-common.x86_64                                      2:8.0.1763-15.el8                                 @AppStream        
vim-enhanced.x86_64                                    2:8.0.1763-15.el8                                 @AppStream        
vim-filesystem.noarch                                  2:8.0.1763-15.el8                                 @AppStream        
vim-minimal.x86_64                                     2:8.0.1763-15.el8                                 @anaconda         
vim-X11.x86_64                                         2:8.0.1763-15.el8                                 appstream         
vim-X11.x86_64                                         2:8.0.1763-15.el8                                 AppStream-exercise

[root@localhost lisa]# yum list vim-enhanced
Installed Packages
vim-enhanced.x86_64                                      2:8.0.1763-15.el8                                       @AppStream

$ man yum
   Info Command
       dnf [options] info [<package-file-spec>...]
              Lists description and summary information about installed and available packages.

       The info command limits the displayed packages the same way as the list command.

       This command by default does not force a sync of expired metadata. See also Metadata Synchronization.

# what's inside the package?
# what commands are made available by this package?
[root@localhost lisa]# yum info vim-enhanced.x86_64
Updating Subscription Management repositories.
Installed Packages
Name         : vim-enhanced
Epoch        : 2
Version      : 8.0.1763
Release      : 15.el8
Architecture : x86_64
Size         : 2.9 M
Source       : vim-8.0.1763-15.el8.src.rpm
Repository   : @System
From repo    : AppStream
Summary      : A version of the VIM editor which includes recent enhancements
URL          : http://www.vim.org/
License      : Vim and MIT
Description  : VIM (VIsual editor iMproved) is an updated and improved version of the
             : vi editor.  Vi was the first real screen-based editor for UNIX, and is
             : still very popular.  VIM improves on vi by adding new features:
             : multiple windows, multi-level undo, block highlighting and more.  The
             : vim-enhanced package contains a version of VIM with extra, recently
             : introduced features like Python and Perl interpreters.
             : 
             : Install the vim-enhanced package if you'd like to use a version of the
             : VIM editor which includes recently added enhancements like
             : interpreters for the Python and Perl scripting languages.  You'll also
             : need to install the vim-common package.


[root@localhost lisa]# repoquery --installed --list vim-enhanced
Updating Subscription Management repositories.
Unable to read consumer identity

This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.

/etc/profile.d/vim.csh
/etc/profile.d/vim.sh
/usr/bin/rvim
/usr/bin/vim
/usr/bin/vimdiff
/usr/bin/vimtutor
/usr/lib/.build-id
/usr/lib/.build-id/30
/usr/lib/.build-id/30/3e78dde064b7080f7529c5c564b48fc106f3f0

[root@localhost lisa]# repoquery --list vim-enhanced
Updating Subscription Management repositories.
Unable to read consumer identity

This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.

Last metadata expiration check: 1:22:19 ago on Sat 24 Apr 2021 09:30:53 PM MDT.
/etc/profile.d/vim.csh
/etc/profile.d/vim.sh
/usr/bin/rvim
/usr/bin/vim
/usr/bin/vimdiff
/usr/bin/vimtutor
/usr/lib/.build-id
/usr/lib/.build-id/30
/usr/lib/.build-id/30/3e78dde064b7080f7529c5c564b48fc106f3f0


$ man repoquery
YUM-UTILS(1)                                        dnf-plugins-core                                       YUM-UTILS(1)

NAME
       yum-utils - classic YUM utilities implemented as CLI shims on top of DNF

       The main purpose of these shims is ensuring backward compatibility with yum-3.

       repoquery
              Searches  the  available  DNF  repositories  for selected packages and displays the requested information
              about them.  Part of core DNF functionality.  Maps to dnf repoquery.  See Repoquery Command in dnf(8) for
              details.
              
YUM(8)                                                    DNF                                                    YUM(8)

NAME
       yum - redirecting to DNF Command Reference

SYNOPSIS
       dnf [options] <command> [<args>...]



   Repoquery Command
       dnf [options] repoquery [<select-options>] [<query-options>] [<package-file-spec>]
              Searches  available  DNF  repositories for selected packages and displays the requested information about
              them. It is an equivalent of rpm -q for remote repositories.

       dnf [options] repoquery --querytags
              Provides the list of tags recognized by the --queryformat repoquery option.

              There are also a few specific repoquery commands repoquery-n, repoquery-na and repoquery-nevra that allow
              the  specification  of  an  exact argument in the NEVRA format (does not affect arguments of options like
              --whatprovides <arg>, ...).
