[root@localhost ~]# man -k udev
dracut-pre-trigger.service (8) - runs the dracut hooks before udevd is triggered
dracut-pre-udev.service (8) - runs the dracut hooks before udevd is started
systemd-udevd (8)    - Device event managing daemon
systemd-udevd-control.socket (8) - Device event managing daemon
systemd-udevd-kernel.socket (8) - Device event managing daemon
systemd-udevd.service (8) - Device event managing daemon
udev (7)             - Dynamic device management
udev.conf (5)        - Configuration for device event managing daemon
udevadm (8)          - udev management tool



$ man -k modules
modules-load.d (5)   - Configure kernel modules to load at boot


MODULES-LOAD.D(5)                              modules-load.d                             MODULES-LOAD.D(5)

NAME
       modules-load.d - Configure kernel modules to load at boot

SYNOPSIS
       /etc/modules-load.d/*.conf

       /run/modules-load.d/*.conf

       /usr/lib/modules-load.d/*.conf

DESCRIPTION
       systemd-modules-load.service(8) reads files from the above directories which contain kernel modules
       to load during boot in a static list. Each configuration file is named in the style of
       /etc/modules-load.d/program.conf. Note that it is usually a better idea to rely on the automatic
       module loading by PCI IDs, USB IDs, DMI IDs or similar triggers encoded in the kernel modules
       themselves instead of static configuration like this. In fact, most modern kernel modules are
       prepared for automatic loading already.

CONFIGURATION DIRECTORIES AND PRECEDENCE
       Configuration files are read from directories in /etc/, /run/, and /usr/lib/, in order of
       precedence. Each configuration file in these configuration directories shall be named in the style
       of filename.conf. Files in /etc/ override files with the same name in /run/ and /usr/lib/. Files in
       /run/ override files with the same name in /usr/lib/.

       Packages should install their configuration files in /usr/lib/. Files in /etc/ are reserved for the
       local administrator, who may use this logic to override the configuration files installed by vendor
       packages.
       
EXAMPLE
       Example 1. /etc/modules-load.d/virtio-net.conf example:

           # Load virtio-net.ko at boot
           virtio-net

SEE ALSO
       systemd(1), systemd-modules-load.service(8), systemd-delta(1), modprobe(8)

# default loading behaviors: /usr/lib/modules-load.d/*.conf
# custom loading behaviors: /etc/modules-load.d/*.conf

#  who loads these kernel modules?   systemd-modules-load.service vs systemd-udevd.service.service
# systemd-modules-load loads all sort of modules
# systemd-udevd.service loads the device drivers only

$ man 8 systemd-modules-load.service

SYSTEMD-MODULES-LOAD.SERVICE(8)         systemd-modules-load.service        SYSTEMD-MODULES-LOAD.SERVICE(8)

NAME
       systemd-modules-load.service, systemd-modules-load - Load kernel modules at boot

SYNOPSIS
       systemd-modules-load.service

       /usr/lib/systemd/systemd-modules-load

DESCRIPTION
       systemd-modules-load.service is an early boot service that loads kernel modules based on static
       configuration.

       See modules-load.d(5) for information about the configuration of this service.

KERNEL COMMAND LINE
       systemd-modules-load.service understands the following kernel command line parameters:

       modules_load=, rd.modules_load=
           Takes a comma-separated list of kernel modules to statically load during early boot. The option
           prefixed with "rd."  is read by the initial RAM disk only.

SEE ALSO
       systemd(1), modules-load.d(5),

$ man 8 systemd-udevd.service
SYSTEMD-UDEVD.SERVICE(8)                   systemd-udevd.service                   SYSTEMD-UDEVD.SERVICE(8)

NAME
       systemd-udevd.service, systemd-udevd-control.socket, systemd-udevd-kernel.socket, systemd-udevd -
       Device event managing daemon

SYNOPSIS
       systemd-udevd.service

       systemd-udevd-control.socket

       systemd-udevd-kernel.socket

       /usr/lib/systemd/systemd-udevd [--daemon] [--debug] [--children-max=] [--exec-delay=]
                                      [--event-timeout=] [--resolve-names=early|late|never] [--version]
                                      [--help]

DESCRIPTION
       systemd-udevd listens to kernel uevents. For every event, systemd-udevd executes matching
       instructions specified in udev rules. See udev(7).

       The behavior of the daemon can be configured using udev.conf(5), its command line options,
       environment variables, and on the kernel command line, or changed dynamically with udevadm control.

# what's in modules-load.d
[root@localhost modules-load.d]# cd /usr/lib/modules-load.d/
[root@localhost modules-load.d]# ls -al
total 8
drwxr-xr-x.  2 root root   32 Dec 17 16:30 .
dr-xr-xr-x. 38 root root 4096 Feb 14 10:46 ..
-rw-r--r--.  1 root root    5 Jul 21  2020 open-vm-tools.conf
[root@localhost modules-load.d]# cat open-vm-tools.conf 
fuse


# default loading behaviors: /usr/lib/modules-load.d/*.conf
# custom loading behaviors: /etc/modules-load.d/*.conf

#  who loads these kernel modules?
systemd-modules-load.service vs systemd-udev.service

# systemd-modules-load.service deals with all kernel modules
# systemd-udev.service deals with device drivers only


$ man 8 systemd-modules-load.service

SYSTEMD-MODULES-LOAD.SERVICE(8)         systemd-modules-load.service        SYSTEMD-MODULES-LOAD.SERVICE(8)

NAME
       systemd-modules-load.service, systemd-modules-load - Load kernel modules at boot

SYNOPSIS
       systemd-modules-load.service

       /usr/lib/systemd/systemd-modules-load

DESCRIPTION
       systemd-modules-load.service is an early boot service that loads kernel modules based on static
       configuration.

       See modules-load.d(5) for information about the configuration of this service.

KERNEL COMMAND LINE
       systemd-modules-load.service understands the following kernel command line parameters:

       modules_load=, rd.modules_load=
           Takes a comma-separated list of kernel modules to statically load during early boot. The option
           prefixed with "rd."  is read by the initial RAM disk only.

SEE ALSO
       systemd(1), modules-load.d(5),

$ man 8 systemd-udevd.service
SYSTEMD-UDEVD.SERVICE(8)                   systemd-udevd.service                   SYSTEMD-UDEVD.SERVICE(8)

NAME
       systemd-udevd.service, systemd-udevd-control.socket, systemd-udevd-kernel.socket, systemd-udevd -
       Device event managing daemon

SYNOPSIS
       systemd-udevd.service

       systemd-udevd-control.socket

       systemd-udevd-kernel.socket

       /usr/lib/systemd/systemd-udevd [--daemon] [--debug] [--children-max=] [--exec-delay=]
                                      [--event-timeout=] [--resolve-names=early|late|never] [--version]
                                      [--help]

DESCRIPTION
       systemd-udevd listens to kernel uevents. For every event, systemd-udevd executes matching
       instructions specified in udev rules. See udev(7).

       The behavior of the daemon can be configured using udev.conf(5), its command line options,
       environment variables, and on the kernel command line, or changed dynamically with udevadm control.


#  list currectly loaded modules

lsmod (8)            - Show the status of modules in the Linux Kernel

LSMOD(8)                                           lsmod                                           LSMOD(8)

NAME
       lsmod - Show the status of modules in the Linux Kernel

SYNOPSIS
       lsmod

DESCRIPTION
       lsmod is a trivial program which nicely formats the contents of the /proc/modules, showing what
       kernel modules are currently loaded.

SEE ALSO
       insmod(8), modprobe(8), modinfo(8) depmod(8)



# find information about a kernel module
MODINFO(8)                                        modinfo                                        MODINFO(8)

NAME
       modinfo - Show information about a Linux Kernel module

SYNOPSIS
       modinfo [-0] [-F field] [-k kernel] [modulename|filename...]

       modinfo -V

       modinfo -h

DESCRIPTION
       modinfo extracts information from the Linux Kernel modules given on the command line. If the module
       name is not a filename, then the /lib/modules/version directory is searched, as is also done by
       modprobe(8) when loading kernel modules.

       modinfo by default lists each attribute of the module in form fieldname : value, for easy reading.
       The filename is listed the same way (although it's not really an attribute).


# load/unload kernel modules

MODPROBE(8)                                       modprobe                                      MODPROBE(8)

NAME
       modprobe - Add and remove modules from the Linux Kernel

SYNOPSIS
       modprobe [-v] [-V] [-C config-file] [-n] [-i] [-q] [-b] [modulename] [module parameters...]

       modprobe [-r] [-v] [-n] [-i] [modulename...]

       modprobe [-c]

       modprobe [--dump-modversions] [filename]

DESCRIPTION
       modprobe intelligently adds or removes a module from the Linux kernel: note that for convenience,
       there is no difference between _ and - in module names (automatic underscore conversion is
       performed).  modprobe looks in the module directory /lib/modules/`uname -r` for all the modules and
       other files, except for the optional configuration files in the /etc/modprobe.d directory (see
       modprobe.d(5)).  modprobe will also use module options specified on the kernel command line in the
       form of <module>.<option> and blacklists in the form of modprobe.blacklist=<module>.

       -r, --remove
           This option causes modprobe to remove rather than insert a module. If the modules it depends on
           are also unused, modprobe will try to remove them too. Unlike insertion, more than one module
           can be specified on the command line (it does not make sense to specify module parameters when
           removing modules).

           There is usually no reason to remove modules, but some buggy modules require it. Your
           distribution kernel may not have been built to support removal of modules at all.

# example
[root@localhost ~]# lsmod
Module                  Size  Used by
vfat                   20480  0
fat                    81920  1 vfat
uas                    28672  0
usb_storage            73728  1 uas
..
# load ext4 module
[root@localhost ~]# modprobe ext4

[root@localhost ~]# lsmod | grep ext
ext4                  761856  1
mbcache                16384  1 ext4
jbd2                  131072  1 ext4

# list ext4 module info
[root@localhost ~]# modinfo ext4
filename:       /lib/modules/4.18.0-240.10.1.el8_3.x86_64/kernel/fs/ext4/ext4.ko.xz
softdep:        pre: crc32c
license:        GPL
description:    Fourth Extended Filesystem
author:         Remy Card, Stephen Tweedie, Andrew Morton, Andreas Dilger, Theodore Ts'o and others
alias:          fs-ext4
alias:          ext3
alias:          fs-ext3
alias:          ext2
alias:          fs-ext2
rhelversion:    8.3
srcversion:     6FA00EA853EC73EDF2CD75A
depends:        mbcache,jbd2
intree:         Y
name:           ext4
vermagic:       4.18.0-240.10.1.el8_3.x86_64 SMP mod_unload modversions 
sig_id:         PKCS#7
...

# unload ext4 module
[root@localhost ~]# modprobe -r ext4
modprobe: FATAL: Module ext4 is in use.