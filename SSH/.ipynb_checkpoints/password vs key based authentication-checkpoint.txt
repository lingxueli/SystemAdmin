By default, password authentication and key based authentication are enabled.
Key-based authentication is used first.

Another option is to turn off the password authentication and use key-based authentication only.

How to config key based authentication?

It's recommended to use passphrase for enhanced security. Caching the passphrase makes it easier to connect.

The following steps are done from the ssh client

1. Work on keys:

create the public/private key pair

https://docs.oracle.com/cd/E19683-01/816-4883/6mb2joaoa/index.html
https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server

$ ssh-keygen

...
Your identification has been saved in /home/username/.ssh/id_rsa.  => private key
Your public key has been saved in /home/username/.ssh/id_rsa.pub.  => public key


And copy the public key to the sshd server. Make sure the directory is available - /home/username/.ssh/

     $ cat ~/.ssh/id_rsa.pub | ssh username@remote_host "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"

Or use tools such as scp

2. Work on caching the passphrase

start the agent for the current shell /bin/bash to store the private keys

$ ssh-agent /bin/bash 

And cache passphrase for the current user's private key.

$ ssh-add

Now the passphrase is cached for the session.

3. connect to the remote sshd server. There's no need to enter the passphrase because it's cached.



What is the SSH agent? ssh-agent is a key manager for SSH. It holds your keys and certificates in memory, unencrypted, and ready for use by ssh . It saves you from typing a passphrase every time you connect to a server.May 19, 2020


SSH-AGENT(1)                        BSD General Commands Manual                       SSH-AGENT(1)

NAME
     ssh-agent — authentication agent

SYNOPSIS
     ssh-agent [-c | -s] [-Dd] [-a bind_address] [-E fingerprint_hash] [-P pkcs11_whitelist]
               [-t life] [command [arg ...]]
     ssh-agent [-c | -s] -k

DESCRIPTION
     ssh-agent is a program to hold private keys used for public key authentication (RSA, DSA,
     ECDSA, Ed25519).  ssh-agent is usually started in the beginning of an X-session or a login
     session, and all other windows or programs are started as clients to the ssh-agent program.
     Through use of environment variables the agent can be located and automatically used for
     authentication when logging in to other machines using ssh(1).

     The agent initially does not have any private keys.  Keys are added using ssh(1) (see
     AddKeysToAgent in ssh_config(5) for details) or ssh-add(1).  Multiple identities may be
     stored in ssh-agent concurrently and ssh(1) will automatically use them if present.
     ssh-add(1) is also used to remove keys from ssh-agent and to query the keys that are held in
     one.



     If a command line is given, this is executed as a subprocess of the agent.  When the command
     dies, so does the agent.

     The idea is that the agent is run in the user's local PC, laptop, or terminal.  Authentica‐
     tion data need not be stored on any other machine, and authentication passphrases never go
     over the network.  However, the connection to the agent is forwarded over SSH remote logins,
     and the user can thus use the privileges given by the identities anywhere in the network in a
     secure way.
...

     Later ssh(1) looks at these variables and uses them to establish a connection to the agent.

     The agent will never send a private key over its request channel.  Instead, operations that
     require a private key will be performed by the agent, and the result will be returned to the
     requester.  This way, private keys are not exposed to clients using the agent.

