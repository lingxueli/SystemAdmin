scp

secure transfter file with an interface similar to cp

NAME
     scp — secure copy (remote file copy program)

SYNOPSIS
     scp [-346BCpqrTv] [-c cipher] [-F ssh_config] [-i identity_file] [-J destination] [-l limit] [-o ssh_option] [-P port] [-S program] source
         ... target

     The source and target may be specified as a local pathname, a remote host with optional path in the form [user@]host:[path], or a URI in the
     form scp://[user@]host[:port][/path].  Local file names can be made explicit using absolute or relative pathnames to avoid scp treating file
     names containing ‘:’ as host specifiers.


     -r      Recursively copy entire directories.  Note that scp follows symbolic links encountered in the tree traversal.
     -P port
             Specifies the port to connect to on the remote host.  Note that this option is written with a capital ‘P’, because -p is already
             reserved for preserving the times and modes of the file.


copy file /etc/hosts to server2 /tmp directory
$ scp /etc/hosts server2:/tmp

copy file from server2 as user root
$ scp root@server2:/etc/passwd ~

copy an entire subdirectory structure
$ scp -r server2:/etc/ /tmp



sftp
secure transfter file with an interface similar to ftp, using ssh.

FTP is not encrypted, sftp should be considered as an alternative.

1. remote server running sshd process
2. an FTP client session is opened to the remote server

# download files from remote server
$ get

# upload files to the remote server
$ put 


NAME
     sftp — secure file transfer program

SYNOPSIS
     sftp [-46aCfpqrv] [-B buffer_size] [-b batchfile] [-c cipher] [-D sftp_server_path] [-F ssh_config] [-i identity_file] [-J destination]
          [-l limit] [-o ssh_option] [-P port] [-R num_requests] [-S program] [-s subsystem | sftp_server] destination



rsync

synchronize files between a remote directoy and a local directory using ssh. only differences are transferred.

NAME
       rsync - a fast, versatile, remote (and local) file-copying tool

SYNOPSIS
       Local:  rsync [OPTION...] SRC... [DEST]

       Access via remote shell:
         Pull: rsync [OPTION...] [USER@]HOST:SRC... [DEST]
         Push: rsync [OPTION...] SRC... [USER@]HOST:DEST

       Access via rsync daemon:
         Pull: rsync [OPTION...] [USER@]HOST::SRC... [DEST]
               rsync [OPTION...] rsync://[USER@]HOST[:PORT]/SRC... [DEST]
         Push: rsync [OPTION...] SRC... [USER@]HOST::DEST
               rsync [OPTION...] SRC... rsync://[USER@]HOST[:PORT]/DEST
