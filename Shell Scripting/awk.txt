awk searches each line of a document and take action when a match is found within a line.

More advanced usage is here: https://www.geeksforgeeks.org/awk-command-unixlinux-examples/

[lisa@localhost ~]$ cat > employee.txt 
ajay manager account 45000
sunil clerk account 25000
varun manager sales 50000
amit manager account 47000
tarun peon sales 15000
deepak clerk sales 23000
sunil peon sales 13000
satvik director purchase 80000 
^C

1. Default behavior of Awk : By default Awk prints every line of data from the specified file. 

[lisa@localhost ~]$ awk '{print}' employee.txt

2. Print the lines which matches with the given pattern. 

[lisa@localhost ~]$ awk '/manager/ {print}' employee.txt 
ajay manager account 45000
varun manager sales 50000
amit manager account 47000

3. Splitting a Line Into Fields

For each record i.e line, the awk command splits the record delimited by whitespace character by default and stores it in the $n variables. If the line has 4 words, it will be stored in $1, $2, $3 and $4 respectively. Also, $0 represents the whole line. 

[lisa@localhost ~]$ awk '{print $1,$4}' employee.txt
ajay 45000
sunil 25000
varun 50000
amit 47000
tarun 15000
deepak 23000
sunil 13000
satvik 80000

4. Built In Variables In Awk

Awk’s built-in variables include the field variables—$1, $2, $3, and so on ($0 is the entire line) — that break a line of text into individual words or pieces called fields. 

NR: NR command keeps a current count of the number of input records

Use of NR built-in variables (Display Line Number) 

[lisa@localhost ~]$ awk '{print NR,$0}' employee.txt 
1 ajay manager account 45000
2 sunil clerk account 25000
3 varun manager sales 50000
4 amit manager account 47000
5 tarun peon sales 15000
6 deepak clerk sales 23000
7 sunil peon sales 13000
8 satvik director purchase 80000 

Another use of NR built-in variables (Display Line From 3 to 6) 

[lisa@localhost ~]$ awk 'NR==3, NR==6 {print NR,$0}' employee.txt 
3 varun manager sales 50000
4 amit manager account 47000
5 tarun peon sales 15000
6 deepak clerk sales 23000

NF: NF command keeps a count of the number of fields within the current input record. 

Use of NF built-in variables (Display Last Field) 

[lisa@localhost ~]$ awk '{print $1,$NF}' employee.txt 
ajay 45000
sunil 25000
varun 50000
amit 47000
tarun 15000
deepak 23000
sunil 13000
satvik 80000


Another example:

[lisa@localhost ~]$ netstat -nutl -4
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN     
tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN     


# display the port information from ipv4 address
# man awk
    SYNOPSIS
           gawk [ POSIX or GNU style options ] -f program-file [ -- ] file ...  ->  [ POSIX or GNU style options ]  i.e. short or long options
           gawk [ POSIX or GNU style options ] [ -- ] program-text file ...     ->   program-file / program-text i.e. the command

       -F fs
       --field-separator fs
              Use fs for the input field separator (the value of the FS prede‐
              fined variable).

   Built-in Variables
       Gawk's built-in variables are:
       NF          The number of fields in the current input record.



[lisa@localhost ~]$ netstat -nutl -4 | grep ':' | awk '{print $4}' | awk -F ':' '{print $NF}'

Another example
[lisa@localhost ~]$ cat > geeksforgeeks.txt
A    B    C
Tarun    A12    1
Man    B6    2
Praveen    M42    3

To count the lines in a file: 
 
[lisa@localhost ~]$ awk 'END { print NR }' geeksforgeeks.txt
4

To find the length of the longest line present in the file: 

[lisa@localhost ~]$ awk '{ if (length($0) > max) max = length($0) } END { print max }' geeksforgeeks.txt
19
# $0 is the built in variable, the whole line

The END isn't superfluous. If you don't specify END then the print would be executed for every line of input.

Quoting from the manual:

A BEGIN rule is executed once only, before the first input record is read. Likewise, an END rule is executed once only, after all the input is read.


# man awk
    SYNOPSIS
           gawk [ POSIX or GNU style options ] -f program-file [ -- ] file ...  ->  [ POSIX or GNU style options ]  i.e. short or long options
           gawk [ POSIX or GNU style options ] [ -- ] program-text file ...     ->   program-file / program-text i.e. the command

    AWK PROGRAM EXECUTION
           An  AWK program consists of a sequence of optional directives, pattern-
           action statements, and optional function definitions.

                  @include "filename"
                  @load "filename"
                  pattern   { action statements }
                  function name(parameter list) { statements }

            ...
               Finally,  after  all  the input is exhausted, gawk executes the code in
               the END rule(s) (if any).

            String Functions
                   Gawk has the following built-in string functions:
                       length([s])             Return  the  length  of  the  string  s, or the
                                               length of $0 if s is not supplied.  As  a  non-
                                               standard  extension,  with  an  array argument,
                                               length() returns the number of elements in  the
                                               array.
           Patterns
               AWK patterns may be one of the following:

                      BEGIN
                      END
               BEGIN  and  END  are two special kinds of patterns which are not tested
               against the input.  The action parts of all BEGIN patterns  are  merged
               as if all the statements had been written in a single BEGIN rule.  They
               are executed before any of the input is read.  Similarly, all  the  END
               rules are merged, and executed when all the input is exhausted (or when
               an exit statement is executed).  BEGIN and END patterns cannot be  com‐
               bined  with  other patterns in pattern expressions.  BEGIN and END pat‐
               terns cannot have missing action parts.


            EXAMPLES
                   Print and sort the login names of all users:

                        BEGIN     { FS = ":" }
                             { print $1 | "sort" }

                   Count lines in a file:

                             { nlines++ }
                        END  { print nlines }