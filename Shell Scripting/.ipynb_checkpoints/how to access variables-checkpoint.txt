1. access the user input and store it in a variable - read command

Example

#!/bin/bash

if [ -z $1 ] ; then               => the semicolon is used the indicate the end of a line
        echo enter a name
        read NAME
else
        NAME=$1
fi

echo you have entered the test $NAME
exit 0


reference:

[root@localhost]# type if
if is a shell keyword

[root@localhost]# help if
if: if COMMANDS; then COMMANDS; [ elif COMMANDS; then COMMANDS; ]... [ else COMMANDS; ] fi
    Execute commands based on conditional.
    
    The `if COMMANDS' list is executed.  If its exit status is zero, then the
    `then COMMANDS' list is executed.  Otherwise, each `elif COMMANDS' list is
    executed in turn, and if its exit status is zero, the corresponding
    `then COMMANDS' list is executed and the if command completes.  Otherwise,
    the `else COMMANDS' list is executed, if present.  The exit status of the
    entire construct is the exit status of the last command executed, or zero
    if no condition tested true.
    
    Exit Status:
    Returns the status of the last command executed.

What's the test command?
TEST(1)                                    User Commands                                   TEST(1)

NAME
       test - check file types and compare values

SYNOPSIS
       test EXPRESSION
       test
       [ EXPRESSION ]
       [ ]
       [ OPTION
       
DESCRIPTION
       Exit with the status determined by EXPRESSION.

       -z STRING
              the length of STRING is zero


2. execute the command and store its result in a varialbe - command substitution $() or ``

Example

[root@localhost]# date +%d%m%y
100421
[root@localhost]# date
Sat Apr 10 17:09:34 MDT 2021

[root@localhost]# date +%d-%m-%y
10-04-21

[root@localhost]# TODAY=$(date +%d-%m-%y)
[root@localhost]# echo $TODAY
10-04-21

Reference
DATE(1)                                    User Commands                                   DATE(1)

NAME
       date - print or set the system date and time

SYNOPSIS
       date [OPTION]... [+FORMAT]
       date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]

DESCRIPTION
       Display the current time in the given FORMAT, or set the system date.

       FORMAT controls the output.  Interpreted sequences are:

       %d     day of month (e.g., 01)
       %m     month (01..12)
       %y     last two digits of year (00..99)

       By default, date pads numeric fields with zeroes.  The following optional flags may follow
       '%':

       -      (hyphen) do not pad the field



3. how to access the value of a var that was previously defined -> echo $VAR